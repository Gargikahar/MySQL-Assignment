Module 4 - Introduction to DBMS

Theory Question:

1. What is SQL, and why is it essential in database management?
Ans. SQL stand for Structured Query Language is a programming language for storing and processing information in a relational database.
 A relational database stores information in tabular form, with rows and columns representing different data attributes and the various 
 relationships between the data values.

* Data Retrieval & Manipulation – SQL enables querying databases to retrieve specific data using commands 
  like SELECT, INSERT, UPDATE, and DELETE.
* Database Structure Management – It allows users to define and modify database structures with CREATE, ALTER, and DROP statements.
* Data Integrity & Security – SQL supports constraints (e.g., PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK) to 
  maintain data accuracy and provides user permissions via GRANT and REVOKE.
* Scalability & Performance – It helps in optimizing query performance through indexing and efficient data structuring.
* Widely Used & Standardized – SQL is supported by most database management systems (DBMS) like MySQL, PostgreSQL, SQL Server, and Oracle.

2.  Explain the difference between DBMS and RDBMS. 
Ans. DBMS: 
     1. DBMS stand for Database Management System.
     2. DBMS store data as a files.
     3. Data elements need to access individually.
     4. No relationship between data.
     5. May not support normalization, leading to redundancy.
     6. Limited constraints for ensuring data accuracy.
     7. Basic security features.
     8. Example, File systems, XML databases, NoSQL databases.

     RDMS:
     1. RDMS stand for Relational Database Management System.
     2. RDBMS stores data in tabular form.
     3. Multiple data elements can be accessed at the same time.
     4. Data is stored in the form of tables which are related to each other.
     5. Follows normalization rules to reduce redundancy.
     6. Enforces constraints like PRIMARY KEY, FOREIGN KEY, etc.
     7. Advanced security, including user roles and access control.
     8. Example, MySQL, PostgreSQL, SQL Server, Oracle.

3. Describe the role of SQL in managing relational databases.
Ans. SQL (Structured Query Language) is the core tool for interacting with Relational Database Management Systems (RDBMS).
 It helps in organizing, managing, and retrieving structured data efficiently. Here’s how SQL plays a crucial role in RDBMS:

1. Data Definition (DDL - Data Definition Language)
SQL helps in defining and managing database structures.
CREATE TABLE – Defines a new table.
ALTER TABLE – Modifies an existing table.
DROP TABLE – Deletes a table.

2. Data Manipulation (DML - Data Manipulation Language)
SQL allows users to insert, update, delete, and retrieve data.
INSERT INTO – Adds new records.
UPDATE – Modifies existing records.
DELETE – Removes records.
SELECT – Retrieves data.

3. Data Retrieval & Querying (DQL - Data Query Language)
SQL enables complex data retrieval using SELECT, including filtering, sorting, and aggregating data.
WHERE – Filters records.
ORDER BY – Sorts results.
GROUP BY – Groups records.
JOIN – Combines data from multiple tables.

4. Transaction Management (TCL - Transaction Control Language)
SQL ensures data consistency and reliability through transactions.
COMMIT – Saves changes permanently.
ROLLBACK – Reverts changes in case of failure.
SAVEPOINT – Sets checkpoints within a transaction.

5. User Access Control & Security (DCL - Data Control Language)
SQL provides security features for managing user permissions.
GRANT – Provides access to users.
REVOKE – Removes access from users.

6. Data Integrity & Constraints
SQL ensures data consistency and accuracy by enforcing constraints like:
PRIMARY KEY – Ensures unique records.
FOREIGN KEY – Maintains relationships between tables.
UNIQUE – Prevents duplicate values.
CHECK – Defines conditions for valid data.

4. What are the key features of SQL? 
SQL is like the brain behind relational databases, helping you store, retrieve, and manage data efficiently. 
key features of SQL:

1. Data Definition Language (DDL): SQL provides a set of commands to define and modify the structure of a database, 
   including creating tables, modifying table structure, and dropping tables.

2. Data Manipulation Language (DML): SQL provides a set of commands to manipulate data within a database, 
   including adding, modifying, and deleting data.

3. Data Query Language(DQL): SQL provides a rich set of commands for querying a database to retrieve data,
   including the ability to filter, sort, group, and join data from multiple tables.

4. Transaction Control Language(TCL): SQL supports transaction processing, which allows users to group a set of 
   database operations into a single transaction that can be rolled back in case of failure.

5. User Access Control (DCL Data Control Language): SQL provides mechanisms to control user access to a database, 
   including the ability to grant and revoke privileges to perform certain operations on the database.

6. Data Integrity: SQL includes features to enforce data integrity, such as the ability to specify constraints on 
   the values that can be inserted or updated in a table, and to enforce referential integrity between tables.

7. Portability: SQL is a standardized language, meaning that SQL code written for one database management 
   system can be used on another system with minimal modification.

 
LAB EXERCISES: 
 
 Lab 1: Create a new database named school_db and a table called students with the 
following columns: student_id, student_name, age, class, and address. 

mysql> create database school_db;
Query OK, 1 row affected (0.36 sec)

mysql> use school_db;
Database changed
mysql> create table students (student_id int primary key auto_increment, student_name varchar(50), age int, class varchar(50), address varchar(50));
Query OK, 0 rows affected (0.53 sec)

mysql> describe students;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| student_id   | int         | NO   | PRI | NULL    | auto_increment |
| student_name | varchar(50) | YES  |     | NULL    |                |
| age          | int         | YES  |     | NULL    |                |
| class        | varchar(50) | YES  |     | NULL    |                |
| address      | varchar(50) | YES  |     | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
5 rows in set (0.29 sec)

 Lab 2: Insert five records into the students table and retrieve all records using the SELECT 
statement.
mysql> insert into students(student_id, student_name, age, class, address) values (101,"Aynash",6,"Grade 1","Manjalpur"),(102,"Naitika",10,"Grade 5","Mandvi"),
    -> (103, "Rudra",13,"Grade 8","Alkapuri"),(104, "Kavya",11,"Grade 6", "Wadi"),(105,"Payal",15,"Grade 10","Vasna");
Query OK, 5 rows affected (0.10 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from students;
+------------+--------------+------+----------+-----------+
| student_id | student_name | age  | class    | address   |
+------------+--------------+------+----------+-----------+
|        101 | Aynash       |    6 | Grade 1  | Manjalpur |
|        102 | Naitika      |   10 | Grade 5  | Mandvi    |
|        103 | Rudra        |   13 | Grade 8  | Alkapuri  |
|        104 | Kavya        |   11 | Grade 6  | Wadi      |
|        105 | Payal        |   15 | Grade 10 | Vasna     |
+------------+--------------+------+----------+-----------+
5 rows in set (0.06 sec)


2. SQL Syntax  
Theory Questions: 
 
1. What are the basic components of SQL syntax?
Ans. SQL (Structured Query Language) syntax consists of several key components that form the foundation of database operations. Here are the basic components:

1. Statements
SQL statements perform tasks such as retrieving, inserting, updating, or deleting data. Common statements include:
SELECT – Retrieves data from a database.
INSERT – Adds new data to a table.
UPDATE – Modifies existing data.
DELETE – Removes data from a table.
CREATE – Creates a database object (e.g., table, view, index).
DROP – Deletes a database object.
ALTER – Modifies an existing database object.

2. Clauses
Clauses are components of SQL statements that specify conditions or modify query behavior:
WHERE – Filters records based on a condition.
ORDER BY – Sorts query results.
GROUP BY – Groups records with aggregate functions.
HAVING – Filters grouped records.

3. Expressions
Expressions compute values and can include:
Arithmetic expressions (5 + 3, price * quantity).
String expressions (CONCAT(first_name, ' ', last_name)).
Boolean expressions (salary > 50000).

4. Functions
SQL provides built-in functions for data processing, including:
Aggregate functions (SUM(), AVG(), COUNT()).
String functions (UPPER(), LOWER(), LENGTH()).
Date functions (NOW(), DATEADD(), DATEDIFF()).

5. Joins
Joins combine data from multiple tables:
INNER JOIN – Returns matching records from both tables.
LEFT JOIN – Returns all records from the left table and matching ones from the right.
RIGHT JOIN – Returns all records from the right table and matching ones from the left.
FULL JOIN – Returns all records when there is a match in either table.

6. Operators
SQL supports various operators for filtering and comparing values:
Comparison operators (=, >, <, >=, <=, <>).
Logical operators (AND, OR, NOT).
Like and pattern matching (LIKE, IN, BETWEEN).
Set operators (UNION, INTERSECT, EXCEPT).

7. Keywords
Reserved words that define SQL operations:
DISTINCT – Removes duplicate results.
AS – Renames columns or tables.
LIMIT / TOP – Limits the number of results.

2. Write the general structure of an SQL SELECT statement.
Ans.The general structure of an SQL SELECT statement is:

SQL SELECT Statement:

SELECT column1, column2, ...
FROM table_name
WHERE condition
GROUP BY column
HAVING condition
ORDER BY column ASC|DESC
LIMIT number;

SELECT – Specifies the columns to retrieve.
FROM – Specifies the table from which to retrieve the data.
WHERE (Optional) – Filters records based on a condition.
GROUP BY (Optional) – Groups rows sharing a property (used with aggregate functions).
HAVING (Optional) – Filters groups (works like WHERE but on grouped data).
ORDER BY (Optional) – Sorts the results in ascending (ASC) or descending (DESC) order.
LIMIT (Optional) – Restricts the number of rows returned.

3. Explain the role of clauses in SQL statements. 
Ans.Role of Clauses in SQL Statements
Clauses in SQL are used to define specific conditions, modify query behavior, and control how data is retrieved or manipulated.
They help refine SQL statements by filtering, grouping, sorting, or limiting results.

Here are the key SQL clauses and their roles:

1. WHERE Clause
Filters records based on a specified condition.
Used in SELECT, UPDATE, and DELETE statements.

2. ORDER BY Clause
Sorts query results in ascending (ASC) or descending (DESC) order.
Default order is ASC (ascending).

3. GROUP BY Clause
Groups rows that have the same values in specified columns.
Often used with aggregate functions (COUNT(), SUM(), AVG(), etc.).

4. HAVING Clause
Filters grouped records (like WHERE, but for aggregated data).

5. JOIN Clause
Combines records from multiple tables based on related columns.

6. LIMIT Clause (or TOP in some databases)
Restricts the number of rows returned in the result.

7. DISTINCT Clause
Removes duplicate values from the result set.

8. UNION Clause
Combines results from multiple SELECT statements, removing duplicates.

 
LAB EXERCISES: 
 
 Lab 1: Write SQL queries to retrieve specific columns (student_name and age) from the 
students table. 
Ans.
mysql> select student_name,age from students;
+--------------+------+
| student_name | age  |
+--------------+------+
| Aynash       |    6 |
| Naitika      |   10 |
| Rudra        |   13 |
| Kavya        |   11 |
| Payal        |   15 |
+--------------+------+
5 rows in set (0.00 sec)

 Lab 2: Write SQL queries to retrieve all students whose age is greater than 10.
Ans.
mysql> select * from students where age > 10;
+------------+--------------+------+----------+----------+
| student_id | student_name | age  | class    | address  |
+------------+--------------+------+----------+----------+
|        103 | Rudra        |   13 | Grade 8  | Alkapuri |
|        104 | Kavya        |   11 | Grade 6  | Wadi     |
|        105 | Payal        |   15 | Grade 10 | Vasna    |
+------------+--------------+------+----------+----------+
3 rows in set (0.05 sec)

mysql>
3. SQL Constraints  
 
Theory Questions: 
 
1. What are constraints in SQL? List and explain the different types of constraints. 
In SQL, constraints are rules enforced on columns in a table to maintain data integrity and accuracy. Constraints help prevent invalid data entry and ensure the consistency of data within the database.

Types of Constraints in SQL
There are several types of constraints in SQL:

NOT NULL
Ensures that a column cannot have NULL values.
Used when a field must always have a value.

UNIQUE
Ensures that all values in a column are distinct.
Allows NULL values unless explicitly defined otherwise.

PRIMARY KEY
Uniquely identifies each record in a table.
Combines NOT NULL and UNIQUE constraints.
A table can have only one primary key.

FOREIGN KEY
Establishes a relationship between two tables.
Ensures that the value in a column exists in another table’s primary key column.

CHECK
Ensures that all values in a column meet a specific condition.

DEFAULT
Assigns a default value to a column if no value is provided.

INDEX (Not a constraint but helps in performance)
Improves retrieval speed for queries on specific columns.

2. How do PRIMARY KEY and FOREIGN KEY constraints differ? 
Ans.
PRIMARY KEY:
1. Definition - Uniquely identifies each record in a table.
2. Uniqueness - Must have unique values for each row.
3. NULL Values - Cannot contain NULL values.
4. Number per Table - Only one PRIMARY KEY per table.
5. Reference - Defined within the same table.
6. Data Integrity - Ensures unique identification of each record in a table.
7. Example,
   CREATE TABLE Students ( Student_ID INT PRIMARY KEY, Student_Name VARCHAR(50) );

FOREIGN KEY:
1. Definition - Establishes a relationship between two tables by referencing the PRIMARY KEY of another table.
2. Uniqueness - Can have duplicate values.
3. NULL Values - Can contain NULL values (if not explicitly set as NOT NULL).
4. Number per Table - A table can have multiple FOREIGN KEYS.
5. Reference - References a PRIMARY KEY from another table.
6. Data Integrity - Ensures referential integrity by preventing invalid data entry.
7. Example,
   CREATE TABLE Enrollments ( Enrollment_ID INT PRIMARY KEY, Student_ID INT, FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) );

3. What is the role of NOT NULL and UNIQUE constraints? 
Ans.
Role of NOT NULL and UNIQUE Constraints in SQL
1. NOT NULL Constraint
Ensures that a column cannot have NULL values.
Used when a field must always contain data.
Helps maintain data completeness and prevents missing values.

Example:

CREATE TABLE Employees (
    Employee_ID INT NOT NULL,
    Name VARCHAR(50) NOT NULL,
    Age INT
);
In this table:
Employee_ID and Name must have values.
Age can be NULL.

2. UNIQUE Constraint
Ensures that all values in a column are distinct.
Allows NULL values (except in databases where NULL is considered a duplicate).
Helps prevent duplicate entries in a specific column.

Example:

CREATE TABLE Customers (
    Customer_ID INT PRIMARY KEY,
    Email VARCHAR(100) UNIQUE
);
In this table:

Customer_ID (PRIMARY KEY) must be unique and cannot be NULL.
Email must be unique but can be NULL.

 
LAB EXERCISES: 
 
 Lab 1: Create a table teachers with the following columns: teacher_id (Primary Key), 
teacher_name (NOT NULL), subject (NOT NULL), and email (UNIQUE).
Ans:

mysql> create table teachers(teacher_id int primary key auto_increment, teacher_name varchar(50) NOT NULL,subject varchar(50) NOT NULL,email varchar(50) UNIQUE);
Query OK, 0 rows affected (0.98 sec)

mysql> describe teachers;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| teacher_id   | int         | NO   | PRI | NULL    | auto_increment |
| teacher_name | varchar(50) | NO   |     | NULL    |                |
| subject      | varchar(50) | NO   |     | NULL    |                |
| email        | varchar(50) | YES  | UNI | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

 Lab 2: Implement a FOREIGN KEY constraint to relate the teacher_id from the 
teachers table with the students table. 
Ans:

mysql> alter table students add column teacher_id int;
Query OK, 0 rows affected (0.29 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table students add foreign key (teacher_id)  references teachers(teacher_id);
Query OK, 5 rows affected (1.77 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> describe students;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| student_id   | int         | NO   | PRI | NULL    | auto_increment |
| student_name | varchar(50) | YES  |     | NULL    |                |
| age          | int         | YES  |     | NULL    |                |
| class        | varchar(50) | YES  |     | NULL    |                |
| address      | varchar(50) | YES  |     | NULL    |                |
| teacher_id   | int         | YES  | MUL | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
6 rows in set (0.00 sec)

4. Main SQL Commands and Sub-commands (DDL)  
 
Theory Questions: 
 
1. Define the SQL Data Definition Language (DDL). 
Ans.
Data Definition Language (DDL) is a subset of SQL used to define, modify, and manage database schema structures, 
such as tables, indexes, and constraints. DDL commands do not manipulate data but instead focus on the structure of the database.

Key DDL Commands
CREATE – Creates new database objects like tables, views, and indexes.

        CREATE TABLE students (student_id INT PRIMARY KEY,name VARCHAR(100) NOT NULL,age INT);

ALTER – Modifies existing database structures (e.g., adding or removing columns).

        ALTER TABLE students ADD COLUMN grade VARCHAR(10);

DROP – Deletes database objects permanently (tables, views, indexes, etc.).

        DROP TABLE students;

TRUNCATE – Removes all records from a table without deleting the table structure.

        TRUNCATE TABLE students;

RENAME – Changes the name of an existing database object.

        ALTER TABLE students RENAME TO learners;

Key Characteristics of DDL
Defines database schema (tables, columns, constraints, etc.).
Automatically commits changes (DDL commands cannot be rolled back).
Does not manipulate data, only modifies the database structure.

2. Explain the CREATE command and its syntax. 
Ans:
CREATE Command in SQL
The CREATE command in SQL is part of Data Definition Language (DDL) 
and is used to create database objects such as tables, views, indexes, and databases.

1. Creating a Database
To create a new database:
Example,
CREATE DATABASE school;
This command creates a database named school.

You must have the necessary permissions to create a database.

2. Creating a Table
The CREATE TABLE statement defines a new table with columns and their data types.

Syntax:

CREATE TABLE table_name (
    column1 datatype constraints,
    column2 datatype constraints,
    ...
);

Example:

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT CHECK (age > 0),
    email VARCHAR(100) UNIQUE
);
Explanation:

student_id INT PRIMARY KEY → Defines student_id as the primary key.
name VARCHAR(100) NOT NULL → Ensures name cannot be NULL.
age INT CHECK (age > 0) → Ensures age is greater than 0.
email VARCHAR(100) UNIQUE → Ensures unique email values.

3. Creating an Index
Indexes improve query performance.

CREATE INDEX idx_student_name ON students(name);
This creates an index on the name column to speed up searches.

4. Creating a View
A view is a virtual table based on a query.

CREATE VIEW student_view AS 
SELECT student_id, name FROM students;
This creates a view student_view that shows only student_id and name from the students table.

Key Points About CREATE Command
Defines the structure of database objects.
Once created, objects can be modified using the ALTER command.
Can be combined with constraints (NOT NULL, PRIMARY KEY, FOREIGN KEY, etc.).

3. What is the purpose of specifying data types and constraints during table creation? 
Ans.
Purpose of Specifying Data Types and Constraints During Table Creation
When creating a table in SQL, specifying data types and constraints is essential to ensure data integrity, 
accuracy, and efficiency in database operations.

1. Purpose of Data Types
A data type defines the kind of values a column can store. This helps in:

1. Data Integrity – Prevents invalid data entry (e.g., storing text in a numeric column).
2. Optimized Storage – Saves memory by using appropriate data types (e.g., INT vs. BIGINT).
3. Faster Processing – Enables efficient indexing and searching based on data types.

Example of Data Types:

INT - Integer ID
VARCHAR(100) - Text with max 100 characters
DECIMAL(10,2)- Numeric value with 2 decimal places
DATE - Date format (YYYY-MM-DD) 
and many more...

2. Purpose of Constraints
Constraints enforce rules on data to maintain accuracy, consistency, and reliability.

1. Prevents Duplicate Data – PRIMARY KEY, UNIQUE
2. Ensures Mandatory Values – NOT NULL
3. Maintains Data Relationships – FOREIGN KEY
3. Applies Business Rules – CHECK, DEFAULT

Example of Constraints:

CREATE TABLE students (
    student_id INT PRIMARY KEY,        -- Unique ID for each student
    name VARCHAR(100) NOT NULL,        -- Name cannot be NULL
    age INT CHECK (age > 0),           -- Age must be greater than 0
    email VARCHAR(100) UNIQUE,         -- No duplicate emails allowed
    class_id INT,                      
    FOREIGN KEY (class_id) REFERENCES classes(class_id)  -- Relationship with another table
);

LAB EXERCISES: 
 
 Lab 1: Create a table courses with columns: course_id, course_name, and 
course_credits. Set the course_id as the primary key. 
Ans:
mysql> use university_db;
Database changed

mysql> create table courses (course_id int primary key auto_increment, course_name varchar(50), course_credits decimal(10,2));
Query OK, 0 rows affected (0.36 sec)

mysql> describe courses;
+----------------+---------------+------+-----+---------+----------------+
| Field          | Type          | Null | Key | Default | Extra          |
+----------------+---------------+------+-----+---------+----------------+
| course_id      | int           | NO   | PRI | NULL    | auto_increment |
| course_name    | varchar(50)   | YES  |     | NULL    |                |
| course_credits | decimal(10,2) | YES  |     | NULL    |                |
+----------------+---------------+------+-----+---------+----------------+
3 rows in set (0.01 sec)

 Lab 2: Use the CREATE command to create a database university_db.
Ans:
create database university_db;
Query OK, 1 row affected (0.11 sec)

5. ALTER Command  
 
Theory Questions: 
 
1. What is the use of the ALTER command in SQL? 
Ans. ALTER Command in SQL
The ALTER command is a Data Definition Language (DDL) statement used to modify an existing database structure without deleting or recreating it. It allows you to add, modify, or remove columns, constraints, and indexes in a table.

Uses of the ALTER Command
The ALTER command is primarily used for:

* Adding new columns
* Modifying column data types
* Renaming columns or tables
* Adding or removing constraints
* Dropping columns

Operation	                            SQL Syntax
Add Column      -   ALTER TABLE table_name ADD COLUMN column_name datatype;
Modify Column   -   ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;
Rename Column   -   ALTER TABLE table_name RENAME COLUMN old_name TO new_name;
Rename Table    -   ALTER TABLE old_table_name RENAME TO new_table_name;
Add Constraint  -   ALTER TABLE table_name ADD CONSTRAINT constraint_name CONSTRAINT_TYPE(column_name);
Drop Column     -   ALTER TABLE table_name DROP COLUMN column_name;
Drop Constraint -	ALTER TABLE table_name DROP CONSTRAINT constraint_name;

2. How can you add, modify, and drop columns from a table using ALTER? 
Ans.
Using ALTER TABLE to Modify Columns in SQL

Add a Column:
ALTER TABLE employees ADD COLUMN department VARCHAR(50);

Modify a Column:
ALTER TABLE employees MODIFY COLUMN department TEXT NOT NULL;  -- MySQL  
ALTER TABLE employees ALTER COLUMN department TYPE TEXT;  -- PostgreSQL, SQL Server

Drop a Column:
ALTER TABLE employees DROP COLUMN department;


ADD COLUMN → Adds a new column.
MODIFY COLUMN / ALTER COLUMN → Changes data type or constraints.
DROP COLUMN → Removes a column from the table.

LAB EXERCISES: 
 
 Lab 1: Modify the courses table by adding a column course_duration using the ALTER 
command. 
Ans.
mysql> alter table courses add column course_duration varchar(50);
Query OK, 0 rows affected (0.92 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> describe courses;
+-----------------+---------------+------+-----+---------+----------------+
| Field           | Type          | Null | Key | Default | Extra          |
+-----------------+---------------+------+-----+---------+----------------+
| course_id       | int           | NO   | PRI | NULL    | auto_increment |
| course_name     | varchar(50)   | YES  |     | NULL    |                |
| course_credits  | decimal(10,2) | YES  |     | NULL    |                |
| course_duration | varchar(50)   | YES  |     | NULL    |                |
+-----------------+---------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

 Lab 2: Drop the course_credits column from the courses table.
Ans.
mysql> alter table courses drop column course_credits;
Query OK, 0 rows affected (0.86 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> describe courses;
+-----------------+-------------+------+-----+---------+----------------+
| Field           | Type        | Null | Key | Default | Extra          |
+-----------------+-------------+------+-----+---------+----------------+
| course_id       | int         | NO   | PRI | NULL    | auto_increment |
| course_name     | varchar(50) | YES  |     | NULL    |                |
| course_duration | varchar(50) | YES  |     | NULL    |                |
+-----------------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

6. DROP Command  
 
Theory Questions: 
 
1. What is the function of the DROP command in SQL? 
Ans.
DROP Command in SQL 
The DROP command permanently deletes database objects like tables, databases, columns, and indexes. 


Drop a Table:

DROP TABLE students;

Drop a Database:
DROP DATABASE school;

Drop a Column:
ALTER TABLE students DROP COLUMN age;

Drop an Index:
DROP INDEX idx_student_name ON students;

2. What are the implications of dropping a table from a database? 
Ans.
Implications of Dropping a Table in SQL
1. Permanent Data Loss – All records in the table are permanently deleted.
2. Cannot Be Undone – The action cannot be rolled back unless a backup exists.
3. Removes Structure – The table schema (columns, constraints, indexes) is deleted.
4. Breaks Relationships – If the table has FOREIGN KEY references, they may cause errors.
5. Affects Queries & Applications – Any queries, views, or applications using the table will fail.
 
LAB EXERCISES: 
 
 Lab 1: Drop the teachers table from the school_db database. 
Ans.
mysql> use school_db;
Database changed
mysql> drop table teachers;
Query OK, 0 rows affected (0.22 sec)

 Lab 2: Drop the students table from the school_db database and verify that the table has 
been removed.
Ans.
mysql> drop table teachers;
Query OK, 0 rows affected (0.16 sec)

mysql> show tables;
Empty set (0.22 sec)

7. Data Manipulation Language (DML)  
 
Theory Questions: 
 
1. Define the INSERT, UPDATE, and DELETE commands in SQL.
Ans.
INSERT, UPDATE, and DELETE Commands in SQL
These three Data Manipulation Language (DML) commands are used to modify data in a database.

1.INSERT Command (Add New Data)
The INSERT command is used to add new records into a table.

Syntax:

INSERT INTO table_name (column1, column2, ...) 
VALUES (value1, value2, ...);
Example:

INSERT INTO students (student_id, name, age) 
VALUES (1, 'Alice', 20);
* Adds a new student to the students table.

2. UPDATE Command (Modify Existing Data)
The UPDATE command modifies existing records in a table.

Syntax:

UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;

Example:

UPDATE students 
SET age = 21 
WHERE student_id = 1;
* Updates Alice’s age to 21.

3. DELETE Command (Remove Data)
The DELETE command removes records from a table.

Syntax:

DELETE FROM table_name WHERE condition;

Example:

DELETE FROM students WHERE student_id = 1;
* Deletes Alice’s record.

Without WHERE, all records will be deleted!

Key Differences

Command	        Purpose	              Affects	
INSERT	    Adds new data             New rows	
UPDATE	    Modifies existing data	  Specific rows	
DELETE	    Removes data	          Specific rows	


2. What is the importance of the WHERE clause in UPDATE and DELETE operations? 
Importance of the WHERE Clause in UPDATE and DELETE Operations
The WHERE clause is critical in UPDATE and DELETE commands because it specifies which records should be modified or removed. 
Without it, all rows in the table will be affected! 
Prevents modifying or deleting all records accidentally.
Targets specific rows instead of affecting the entire table.

Example (Safe UPDATE with WHERE)

UPDATE students SET age = 22 WHERE student_id = 1;
Without WHERE → Updates all students' ages!

Example (Safe DELETE with WHERE)

DELETE FROM students WHERE student_id = 1;
Without WHERE → Deletes all students!


LAB EXERCISES: 
 
 Lab 1: Insert three records into the courses table using the INSERT command. 
mysql> insert into courses (course_id,course_name,course_duration)Values
    -> (1001,"PHP","4 Months"),
    -> (1002,"Java","6 Months"),
    -> (1003,"Data Analyst","8 Months");
Query OK, 3 rows affected (0.12 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | Java         | 6 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 2: Update the course duration of a specific course using the UPDATE command. 
Ans.
mysql> update courses set course_duration = "7 Months" where course_name="java";
Query OK, 1 row affected (0.09 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | java         | 7 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 3: Delete a course with a specific course_id from the courses table using the DELETE 
command. 
Ans.
mysql> delete from courses where course_id=1003;
Query OK, 1 row affected (0.13 sec)

mysql> select * from courses;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1001 | PHP         | 4 Months        |
|      1002 | java        | 7 Months        |
+-----------+-------------+-----------------+
2 rows in set (0.00 sec)

8. Data Query Language (DQL)  
 
Theory Questions: 
 
1. What is the SELECT statement, and how is it used to query data? 
Ans.
SELECT Statement in SQL
The SELECT statement is used to retrieve data from one or more tables in a database. It allows filtering, 
sorting, and grouping of data based on specific conditions.

Basic Syntax:
SELECT column1, column2 FROM table_name;

Select All Columns:
SELECT * FROM courses;

Filter with WHERE:
SELECT * FROM courses WHERE course_duration = '6 Months';

Sort with ORDER BY:
SELECT * FROM courses ORDER BY course_name ASC;

Limit Results:
SELECT * FROM courses LIMIT 5;

2. Explain the use of the ORDER BY and WHERE clauses in SQL queries. 
Ans.
ORDER BY and WHERE Clauses in SQL
Both ORDER BY and WHERE are used to refine query results:

WHERE → Filters rows before retrieval.
ORDER BY → Sorts the final result set.

Example (WHERE + ORDER BY)
SELECT * FROM students WHERE age > 18 ORDER BY name ASC;
 
LAB EXERCISES: 
 
 Lab 1: Retrieve all courses from the courses table using the SELECT statement. 
Ans.
mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | java         | 7 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 2: Sort the courses based on course_duration in descending order using ORDER BY.
Ans.
mysql> select * from courses where course_duration order by course_duration desc;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1002 | java        | 7 Months        |
|      1001 | PHP         | 4 Months        |
+-----------+-------------+-----------------+
2 rows in set, 2 warnings (0.10 sec)

 Lab 3: Limit the results of the SELECT query to show only the top two courses using LIMIT.
Ans.
mysql> select * from courses order by course_id limit 2;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1001 | PHP         | 4 Months        |
|      1002 | java        | 7 Months        |
+-----------+-------------+-----------------+
2 rows in set (0.00 sec)

9. Data Control Language (DCL)  
 
Theory Questions: 
 
1. What is the purpose of GRANT and REVOKE in SQL? 
Ans.
Data Controlling Language (DCL) helps users to retrieve and modify the data stored in the database with some specified queries. Grant 
and Revoke belong to these types of commands of the Data controlling Language. DCL is a component of SQL commands. 

1. Grant : 
SQL Grant command is specifically used to provide privileges to database objects for a user. 
This command also allows users to grant permissions to other users too. 

Syntax: 
grant privilege_name on object_name
to {user_name | public | role_name} 
Here privilege_name is which permission has to be granted, object_name is the name of the database object, 
user_name is the user to which access should be provided, the public is used to permit access to all the users. 

2. Revoke : 
Revoke command withdraw user privileges on database objects if any granted. It does operations opposite to the Grant command.
When a privilege is revoked from a particular user U, then the privileges granted to all other users by user U will be revoked. 

Syntax: 
revoke privilege_name on object_name
from {user_name | public | role_name}
Example:  

2. How do you manage privileges using these commands? 
Ans.
Managing user access and privileges is a crucial aspect of database administration in MySQL. 
After creating a user account with the CREATE USER statement, the next step is to define what that user can do within the database.

This is achieved through the GRANT statement, which allows administrators to assign specific privileges to users 
and ensure they can perform only the actions necessary for their roles.
Also, if a user’s access needs to be restricted, the REVOKE statement can remove previously granted privileges. 

LAB EXERCISES: 
 
 Lab 1: Create two new users user1 and user2 and grant user1 permission to SELECT 
from the courses table. 
 CREATE USER 'user1'@'localhost' IDENTIFIED BY 'password1';
Query OK, 0 rows affected (0.47 sec)

mysql> CREATE USER 'user2'@'localhost' IDENTIFIED BY 'password2';
Query OK, 0 rows affected (0.17 sec)

GRANT SELECT ON university_db.courses TO 'user1'@'localhost';
Query OK, 0 rows affected (0.10 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.08 sec)

 SHOW GRANTS FOR 'user1'@'localhost';
+------------------------------------------------------------------+
| Grants for user1@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user1`@`localhost`                        |
| GRANT SELECT ON `university_db`.`courses` TO `user1`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.06 sec)

 Lab 2: Revoke the INSERT permission from user1 and give it to user2.
Ans.
REVOKE INSERT ON university_db.courses FROM 'user1'@'localhost';
Query OK, 0 rows affected (0.11 sec)

mysql> GRANT INSERT ON university_db.courses TO 'user2'@'localhost';
Query OK, 0 rows affected (0.10 sec)

mysql> SHOW GRANTS FOR 'user1'@'localhost';
+------------------------------------------------------------------+
| Grants for user1@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user1`@`localhost`                        |
| GRANT SELECT ON `university_db`.`courses` TO `user1`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.00 sec)

mysql> SHOW GRANTS FOR 'user2'@'localhost';
+------------------------------------------------------------------+
| Grants for user2@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user2`@`localhost`                        |
| GRANT INSERT ON `university_db`.`courses` TO `user2`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.00 sec)

10. Transaction Control Language (TCL)  
 
Theory Questions: 
 
1. What is the purpose of the COMMIT and ROLLBACK commands in SQL?
Ans.n SQL, transaction control is essential for managing changes in a database effectively. 
COMMIT and ROLLBACK are two crucial Transaction Control Language (TCL) commands that help maintain data integrity and consistency. 
While COMMIT ensures that all changes in a transaction are permanently saved, ROLLBACK provides a mechanism to undo changes when something goes wrong.

Understanding the differences between these commands is critical for database administrators, 
developers, and anyone working with transactional data to ensure reliable and error-free database operations. 
Proper usage of these commands ensures reliable and error-free database operations while maintaining data stability.

COMMIT
1. Function - Permanently saves changes made by the current transaction.
2. Undo Capability - Cannot undo changes after execution.
3. When Applied - Used when the transaction is successfully completed.
4. Data Integrity - Ensures that changes are saved permanently.
5. Syntax - COMMIT;
6. Error Handling - No changes are rolled back even if errors occur after the COMMIT statement.

ROLLBACK
1. Function - Undoes changes made by the current transaction.
2. Undo Capability - Reverts the database to its previous state before the transaction.
3. When Applied - Used when the transaction fails, is incorrect, or aborted.
4. Data Integrity - Ensures that errors do not affect the database by undoing partial changes.
5. Syntax - ROLLBACK;
6. Error Handling - Automatically undoes uncommitted changes in case of errors or failures.


2. Explain how transactions are managed in SQL databases. 
Managing Transactions in SQL Databases
A transaction in SQL is a group of one or more SQL statements executed as a single unit of work. Transactions ensure data integrity and consistency, especially in scenarios involving multiple changes to the database.
Transaction Lifecycle
Transactions follow a lifecycle with four main stages:
BEGIN (Start Transaction) – The transaction starts.
DML Operations – Perform database changes (INSERT, UPDATE, DELETE).
COMMIT or ROLLBACK
COMMIT: Saves all changes permanently.
ROLLBACK: Undoes all changes made during the transaction.
END – The transaction is complete.

A transaction in SQL is a sequence of one or more SQL statements executed as a single unit of work. 
These statements could be performing operations like INSERT, UPDATE, or DELETE. The main idea behind a transaction is that all changes made within it should either be completely successful or fully undone in case of failure. In the case of an error, a rollback ensures that no partial changes are saved.

The SQL transaction must adhere to four key properties known as ACID:

Atomicity: The outcome of a transaction can either be completely successful or completely unsuccessful. 
The whole transaction must be rolled back if one part of it fails.
Consistency: Transactions maintain integrity restrictions by moving the database from one valid state to another.
Isolation: Concurrent transactions are isolated from one another, assuring the accuracy of the data.
Durability: Once a transaction is committed, its modifications remain in effect even in the event of a system failure.
 
LAB EXERCISES: 
 
 Lab 1: Insert a few rows into the courses table and use COMMIT to save the changes. 
Ans.
 start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1006,'Paython','5 Months'),(1007,'Artificial Intelligence','8 Months');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> commit;
Query OK, 0 rows affected (0.10 sec)

mysql> SELECT * FROM courses;
+-----------+-------------------------+-----------------+
| course_id | course_name             | course_duration |
+-----------+-------------------------+-----------------+
|      1001 | PHP                     | 4 Months        |
|      1002 | java                    | 7 Months        |
|      1003 | Data Analyst            | 8 Months        |
|      1004 | Full Stack              | 12 Months       |
|      1005 | Javascript              | 3 Months        |
|      1006 | Paython                 | 5 Months        |
|      1007 | Artificial Intelligence | 8 Months        |
+-----------+-------------------------+-----------------+
7 rows in set (0.00 sec)

 Lab 2: Insert additional rows, then use ROLLBACK to undo the last insert operation. 
Ans.
 start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1008,'Data Science','3 Months');
Query OK, 1 row affected (0.00 sec)

mysql> rollback;
Query OK, 0 rows affected (0.04 sec)

mysql> SELECT * FROM courses;
+-----------+-------------------------+-----------------+
| course_id | course_name             | course_duration |
+-----------+-------------------------+-----------------+
|      1001 | PHP                     | 4 Months        |
|      1002 | java                    | 7 Months        |
|      1003 | Data Analyst            | 8 Months        |
|      1004 | Full Stack              | 12 Months       |
|      1005 | Javascript              | 3 Months        |
|      1006 | Paython                 | 5 Months        |
|      1007 | Artificial Intelligence | 8 Months        |
+-----------+-------------------------+-----------------+
7 rows in set (0.00 sec)

 Lab 3: Create a SAVEPOINT before updating the courses table, and use it to roll back 
specific changes.
Ans.
mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1008,'Data Science','3 Months');
Query OK, 1 row affected (0.00 sec)

mysql> savepoint before_update;
Query OK, 0 rows affected (0.00 sec)

mysql> update courses set course_duration ='6 Months' where course_id=1008;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> ROLLBACK TO before_update;
Query OK, 0 rows affected (0.05 sec)

mysql> commit;
Query OK, 0 rows affected (0.07 sec)

mysql> SELECT * FROM courses WHERE course_id = 1008;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1008 | Data Science | 3 Months        |
+-----------+--------------+-----------------+
1 row in set (0.00 sec)

11. SQL Joins  
 
Theory Questions: 
 
1. Explain the concept of JOIN in SQL. What is the difference between INNER JOIN, LEFT 
JOIN, RIGHT JOIN, and FULL OUTER JOIN? 
Ans.
In SQL, a JOIN is used to combine rows from two or more tables based on a related column between them. 
This helps retrieve meaningful data from multiple tables in a relational database.
Types of JOINs in SQL
There are four primary types of JOIN operations in SQL:

1. INNER JOIN
Returns only the matching rows from both tables based on the given condition.
If there is no match, the row is excluded from the result.
Example:
SELECT employees.name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.id;
Output: Returns only employees who are assigned to a department.

2. LEFT JOIN (LEFT OUTER JOIN)
Returns all rows from the left table and the matching rows from the right table.
If there is no match in the right table, NULL values are returned.
Example:
SELECT employees.name, departments.department_name
FROM employees
LEFT JOIN departments ON employees.department_id = departments.id;
Output: Returns all employees, including those who are not assigned to any department (with NULL in department_name).

3. RIGHT JOIN (RIGHT OUTER JOIN)
Returns all rows from the right table and the matching rows from the left table.
If there is no match in the left table, NULL values are returned.
Example:
SELECT employees.name, departments.department_name
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.id;
Output: Returns all departments, including those that have no employees (with NULL in employee name).

4. FULL OUTER JOIN
Returns all rows when there is a match in either left or right table.
If there is no match, NULLs are returned for the missing values from one of the tables.
Example:
SELECT employees.name, departments.department_name
FROM employees
FULL OUTER JOIN departments ON employees.department_id = departments.id;
Output: Returns all employees and all departments. If an employee has no department, the department column is NULL, and vice versa.

2. How are joins used to combine data from multiple tables? 
Ans. SQL JOIN operations allow you to retrieve and merge data from multiple tables in a relational database based on a common key or relationship.
 This is useful when data is normalized across different tables.
 SQL joins are an essential part of relational database management, allowing users to combine data from multiple tables efficiently. 
 When the required data is spread across different tables, joining these tables efficiently is necessary.

 
LAB EXERCISES: 
 
 Lab 1: Create two tables: departments and employees. Perform an INNER JOIN to 
display employees along with their respective departments. 
Ans
create table departments(depart_id int primary key auto_increment, department_name varchar(50));
Query OK, 0 rows affected (0.55 sec)

insert into departments (depart_id,department_name) values(101,'HR'),(102,'Sales'),(103,'Marketing');
Query OK, 3 rows affected (0.13 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> create table employees(emp_id int primary key auto_increment, employee_name varchar(50), salary decimal(10,2),depart_id int,
foreign key(depart_id)references departments(depart_id) );
Query OK, 0 rows affected (0.74 sec)

insert into employees(emp_id,employee_name,salary,depart_id)values(201,'Ayansh',34000,101),(202,'Rahul',25000,103),(203,'Prachi',12000,102);
Query OK, 3 rows affected (0.08 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT employees.emp_id, employees.employee_name, departments.department_name
    -> FROM employees
    -> INNER JOIN departments ON employees.depart_id = departments.depart_id;
+--------+---------------+-----------------+
| emp_id | employee_name | department_name |
+--------+---------------+-----------------+
|    201 | Ayansh        | HR              |
|    202 | Rahul         | Marketing       |
|    203 | Prachi        | Sales           |
+--------+---------------+-----------------+

 Lab 2: Use a LEFT JOIN to show all departments, even those without employees.
Ans.
mysql> select departments.depart_id, departments.department_name,employees.emp_id, employees.employee_name
    -> from departments
    -> left join employees on departments.depart_id = employees.depart_id;
+-----------+-----------------+--------+---------------+
| depart_id | department_name | emp_id | employee_name |
+-----------+-----------------+--------+---------------+
|       101 | HR              |    201 | Ayansh        |
|       102 | Sales           |    203 | Prachi        |
|       103 | Marketing       |    202 | Rahul         |
|       104 | Finance         |   NULL | NULL          |
+-----------+-----------------+--------+---------------+
4 rows in set (0.00 sec)

12. SQL Group By  
 
Theory Questions: 
 
1. What is the GROUP BY clause in SQL? How is it used with aggregate functions? 
Ans.In SQL, grouping and aggregating data are essential techniques for analyzing datasets. When dealing with large volumes of data,
 we often need to summarize or categorize it into meaningful groups. 
 The combination of the GROUP BY clause and aggregate functions like COUNT(), SUM(), AVG(), MIN(), and MAX() 
 makes it easy to perform such tasks.

Grouping and Aggregating Data
Grouping Data: The GROUP BY clause in SQL is used to arrange identical data into groups based on one or more columns. 
Once data is grouped, aggregate functions can be used to summarize the information within those groups.

Aggregating Data: Aggregate functions perform calculations on multiple rows of data and return a single result. 
Common aggregate functions include COUNT(), SUM(), AVG(), MIN(), and MAX(). These help us get summaries like totals, averages, 
and counts for different categories or groups

Syntax:

SELECT column1, column2, …, AGGREGATE_FUNCTION(column3)
FROM table_name
WHERE condition
GROUP BY column1, column2, …
HAVING condition
ORDER BY column1;

2. Explain the difference between GROUP BY and ORDER BY. 
Ans.
GROUP BY
1. Group by statement is used to group the rows that have the same value.
2. It may be allowed in CREATE VIEW statement.
3. In select statements, it is always used before the order by keyword.
4. An attribute cannot be in the group by a statement under the aggregate function.
5. In group by clause, the tuples are grouped based on the similarity between the attribute values of tuples.
6. Group by controls the presentation of tuples(rows).

ORDER BY
1. Whereas Order by statement sort the result-set either in ascending or descending order.
2. While it does not use in CREATE VIEW statement.
3. While in the select statement, it is always used after the group by keyword.
4. Whereas in order by statement, the attribute can be under aggregate function.
5. Whereas in order by clause, the result set is sorted based on ascending or descending order.
6. While order by clause controls the presentation of columns.

 
LAB EXERCISES: 
 
 Lab 1: Group employees by department and count the number of employees in each 
department using GROUP BY. 
Ans.
mysql> select depart_id, count(*) as employees_count
    -> from employees
    -> group by depart_id;
+-----------+-----------------+
| depart_id | employees_count |
+-----------+-----------------+
|       101 |               2 |
|       102 |               1 |
|       103 |               1 |
+-----------+-----------------+
3 rows in set (0.00 sec)

 Lab 2: Use the AVG aggregate function to find the average salary of employees in each 
department.
Ans.
mysql> select depart_id, avg(salary) as avgerage_salary
    -> from employees
    -> group by depart_id;
+-----------+-----------------+
| depart_id | avgerage_salary |
+-----------+-----------------+
|       101 |    30000.000000 |
|       102 |    12000.000000 |
|       103 |    25000.000000 |
+-----------+-----------------+
3 rows in set (0.00 sec)

13. SQL Stored Procedure  
 
Theory Questions: 
 
1. What is a stored procedure in SQL, and how does it differ from a standard SQL query? 
Ans.SQL Stored Procedures are a powerful feature in database management systems (DBMS) that allow developers to encapsulate SQL code 
and business logic. Stored procedures are precompiled SQL statements that are stored in the database and can be executed as a single unit.
A SQL Stored Procedure is a collection of SQL statements bundled together to perform a specific task. These procedures are stored 
in the database and can be called upon by users, applications, or other procedures. Stored procedures are essential for automating database 
tasks, improving efficiency, and reducing redundancy. By encapsulating logic within stored procedures, developers can streamline their 
workflow and enforce consistent business rules across multiple applications and systems.

Syntax:

CREATE PROCEDURE procedure_name
(parameter1 data_type, parameter2 data_type, …)
AS
BEGIN
   — SQL statements to be executed
END

Key Terms
CREATE PROCEDURE: This keyword creates the stored procedure with the given name.
@parameter1, @parameter2: These are input parameters that allow you to pass values into the stored procedure.
BEGIN...END: These keywords define the block of SQL statements that make up the procedure body.

Differences Between a Stored Procedure and a Standard SQL Query
Execution: A stored procedure is executed using commands like EXEC or CALL, while a standard SQL query is written and run directly.
Performance: Stored procedures are precompiled, making them faster for repeated execution, whereas SQL queries are compiled every time they run.
Reusability: Stored procedures can be reused multiple times without rewriting the SQL, unlike standard queries, 
which need to be rewritten or copied.
Security: Stored procedures can restrict direct access to tables and enforce access controls, while standard queries expose tables directly.
Parameterization: Stored procedures can accept parameters for dynamic execution, whereas standard queries require 
Transaction Handling: Stored procedures support complex transactions with multiple SQL statements, while standard 
queries usually execute one operation at a time.

2. Explain the advantages of using stored procedures. 
Ans.
Advantages of Using Stored Procedures in SQL
1. Improved Performance
Stored procedures are precompiled and optimized by the database engine.
Unlike standard queries, which are compiled every time they run, stored procedures execute faster, especially for repetitive tasks.
2. Code Reusability and Maintainability
Once created, a stored procedure can be reused multiple times without rewriting SQL queries.
If a change is needed, it can be updated in one place rather than modifying multiple queries across the application.
3. Enhanced Security
Stored procedures can restrict direct access to database tables.
Users can be granted permission to execute a stored procedure without needing direct table access, reducing security risks.
4. Reduced Network Traffic
Since stored procedures execute directly on the database server, only the execution command (EXEC ProcedureName) is sent from the application,
reducing network load.
In contrast, sending raw SQL queries each time increases network traffic.
5. Encapsulation of Business Logic
Complex logic, such as calculations, validations, and data transformations, can be implemented inside stored procedures.
This centralizes business rules within the database instead of scattering them across the application code.
6. Better Transaction Management
Stored procedures can handle multiple SQL statements as a single unit, ensuring data integrity.
They support BEGIN TRANSACTION, COMMIT, and ROLLBACK, allowing proper error handling and rollback in case of failure.
7. Parameterization and Dynamic Execution
Stored procedures support input and output parameters, making them flexible and dynamic.
Example: Instead of writing separate queries for different departments, a stored procedure can accept a department name 
as a parameter and return relevant data.
8. Avoids SQL Injection Attacks
Using parameterized stored procedures helps prevent SQL injection since user inputs are treated as parameters rather than part of the SQL query. 

LAB EXERCISES: 
 
 Lab 1: Write a stored procedure to retrieve all employees from the employees table based 
on department. 
mysql> delimiter //
mysql> CREATE PROCEDURE getempbydepartment()
    -> begin
    -> SELECT e.emp_id, e.employee_name, e.salary, d.department_name
    -> FROM Employees e
    -> JOIN departments d ON e.depart_id = d.depart_id
    -> WHERE d.depart_id =e.depart_id ;
    -> end
    -> //
Query OK, 0 rows affected (0.17 sec)

mysql> delimiter ;
mysql> call getempbydepartment();
+--------+---------------+----------+-----------------+
| emp_id | employee_name | salary   | department_name |
+--------+---------------+----------+-----------------+
|    201 | Ayansh        | 34000.00 | HR              |
|    202 | Rahul         | 25000.00 | Marketing       |
|    203 | Prachi        | 12000.00 | Sales           |
|    204 | Naitika       | 26000.00 | HR              |
+--------+---------------+----------+-----------------+
4 rows in set (0.00 sec)

Query OK, 0 rows affected (0.02 sec)

mysql>

second process by deparments

mysql> delimiter //
mysql> CREATE PROCEDURE getempbydepart (IN dept_name VARCHAR(50))
    -> begin
    -> SELECT e.emp_id, e.employee_name, e.salary, d.department_name
    -> FROM Employees e
    -> JOIN departments d ON e.depart_id = d.depart_id
    -> WHERE d.department_name = dept_name;
    -> end
    -> //
Query OK, 0 rows affected (0.09 sec)

mysql> delimiter ;
mysql> call getempbydepart('HR');
+--------+---------------+----------+-----------------+
| emp_id | employee_name | salary   | department_name |
+--------+---------------+----------+-----------------+
|    201 | Ayansh        | 34000.00 | HR              |
|    204 | Naitika       | 26000.00 | HR              |
+--------+---------------+----------+-----------------+
2 rows in set (0.00 sec)

Query OK, 0 rows affected (0.02 sec)

 Lab 2: Write a stored procedure that accepts course_id as input and returns the course 
details.
ans.
mysql> delimiter //
mysql> create procedure getcoursedetails (in input_course_id int)
    -> begin
    -> select course_id, course_name, course_duration
    -> from courses
    -> where course_id = input_course_id;
    -> end
    -> //
Query OK, 0 rows affected (0.81 sec)

mysql> delimiter ;

mysql> call  getcoursedetails(1001);
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1001 | PHP         | 4 Months        |
+-----------+-------------+-----------------+
1 row in set (0.00 sec)

Query OK, 0 rows affected (0.01 sec)

15. SQL Triggers  
 
Theory Questions: 
 
1. What is a trigger in SQL? Describe its types and when they are used.
Ans. A trigger in SQL is a special type of stored procedure that automatically executes in response to certain events
on a specified table or view. Triggers are used to enforce business rules, maintain data integrity,
and automate database tasks.
For example, if a company wants to automatically log changes whenever an employee's salary is updated,
a trigger can be created on the Employees table to insert records into an AuditLog table whenever the salary column changes.
Types of Triggers in SQL
1. Based on Execution Time:
Triggers are classified based on when they execute in relation to the triggering event (INSERT, UPDATE, DELETE).
a) BEFORE Trigger
Executes before the actual operation (INSERT, UPDATE, DELETE).
Commonly used for validation and data modification before inserting or updating records.
Example Use Case: Prevent inserting employees with a salary lower than the minimum wage.

b) AFTER Trigger
Executes after the actual operation has been performed.
Often used for logging, auditing, or updating related tables.
Example Use Case: Log changes whenever an employee's details are updated.

2. Based on Event Type:
Triggers are also classified based on the event that activates them.
a) INSERT Trigger
Fires when a new row is added to a table.
Used to enforce business rules on data insertion.
Exmple Use Case: Automatically generate a unique employee code when a new employee is inserted.

b) UPDATE Trigger
Fires when an existing row is modified.
Used to track or validate changes to data.
Example Use Case: Log old and new salary details whenever an employee's salary is updated.

c) DELETE Trigger
Fires when a row is deleted from a table.
Used to prevent accidental deletions or maintain historical records.
Example Use Case: Move deleted customer records to an archive table instead of deleting them permanently.

When to Use Triggers?
1. Maintaining Data Integrity → Enforce business rules like preventing negative values in salary fields.
2. Auditing and Logging → Track changes in critical tables (e.g., storing old values before an update).
3. Automating Tasks → Auto-updating related records when a primary table is modified.
4. Restricting Actions → Prevent specific changes (e.g., blocking deletion of admin users).

2. Explain the difference between INSERT, UPDATE, and DELETE triggers. 
Ans.
Difference Between INSERT, UPDATE, and DELETE Triggers in SQL
1. INSERT Trigger
Fires when a new row is added to a table.
Used to validate data, generate unique values, or log insert operations.
Example: When a new employee is added, automatically insert a record into an audit log.

2. UPDATE Trigger
Fires when an existing row is modified.
Used to track changes, prevent unauthorized updates, or update related records.
Example: When an employee's salary is updated, store the old and new salary in an audit table.

3. DELETE Trigger
Fires when a row is deleted from a table.
Used to prevent accidental deletions, archive data, or maintain logs.
Example: When a customer record is deleted, move it to an archive table instead of permanent deletion.

LAB EXERCISES: 
 
 Lab 1: Create a trigger to automatically log changes to the employees table when a new 
employee is added. 
Ans.
mysql> CREATE TABLE Employee_Log (
    ->     log_id INT PRIMARY KEY AUTO_INCREMENT,
    ->     emp_id INT,
    ->     employee_name VARCHAR(50),
    ->     action VARCHAR(20),
    ->     log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    -> );
Query OK, 0 rows affected (0.41 sec)

mysql> delimiter //
mysql> create trigger aemp_insert
    -> after insert on employees
    -> for each row
    -> begin
    -> insert into employee_log(emp_id,employee_name,action)
    -> values(new.emp_id,new.employee_name,'NEW EMPLOYEE IS ADDED');
    -> END
    -> //
Query OK, 0 rows affected (0.17 sec)

mysql> alter table Employee_log modify action varchar(100);
Query OK, 0 rows affected (1.30 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> insert into employees (employee_name,salary,depart_id)values('sumit',56000,102);
Query OK, 1 row affected (0.05 sec)

mysql> select * from Employee_log;
+--------+--------+---------------+-----------------------+---------------------+
| log_id | emp_id | employee_name | action                | log_timestamp       |
+--------+--------+---------------+-----------------------+---------------------+
|      1 |    206 | sumit         | NEW EMPLOYEE IS ADDED | 2025-03-27 13:15:36 |
+--------+--------+---------------+-----------------------+---------------------+
1 row in set (0.00 sec)

 Lab 2: Create a trigger to update the last_modified timestamp whenever an employee 
record is updated.
Ans.
ALTER TABLE employees ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

DELIMITER //

CREATE TRIGGER buemp
BEFORE UPDATE ON employees
FOR EACH ROW
BEGIN
    SET NEW.last_modified = NOW();
END$$

DELIMITER ;

 select * from employees;
 +--------+---------------+----------+-----------+---------------------+
| emp_id | employee_name | salary   | depart_id | last_modified       |
+--------+---------------+----------+-----------+---------------------+
|    201 | Ayansh        | 34000.00 |       101 | 2025-03-27 13:18:00 |
|    202 | Rahul         | 25000.00 |       103 | 2025-03-27 13:18:00 |
|    203 | Prachi        | 12000.00 |       102 | 2025-03-27 13:18:00 |
|    204 | Naitika       | 26000.00 |       101 | 2025-03-27 13:18:00 |
|    206 | sumit         | 56000.00 |       102 | 2025-03-27 13:18:00 |
+--------+---------------+----------+-----------+---------------------+
5 rows in set (0.09 sec)

 update employees set salary = 50000 where emp_id = 201;

 mysql> select * from employees;
   
+--------+---------------+----------+-----------+---------------------+
| emp_id | employee_name | salary   | depart_id | last_modified       |
+--------+---------------+----------+-----------+---------------------+
|    201 | Ayansh        | 50000.00 |       101 | 2025-03-27 13:53:47 |
|    202 | Rahul         | 25000.00 |       103 | 2025-03-27 13:18:00 |
|    203 | Prachi        | 12000.00 |       102 | 2025-03-27 13:18:00 |
|    204 | Naitika       | 26000.00 |       101 | 2025-03-27 13:18:00 |
|    206 | sumit         | 56000.00 |       102 | 2025-03-27 13:18:00 |
+--------+---------------+----------+-----------+---------------------+
5 rows in set (0.00 sec)

19. Rollback and Commit Savepoint  
 
Theory Questions: 
 
1. Explain the concept of SAVEPOINT in transaction management. How do ROLLBACK and 
COMMIT interact with savepoints? 
Ans.
SAVEPOINT in Transaction Management
A SAVEPOINT is a marker within a transaction that allows you to partially rollback to a specific point without rolling back the entire transaction. It helps in handling errors efficiently by preserving part of the transaction progress.

Interaction with ROLLBACK and COMMIT
ROLLBACK TO SAVEPOINT: Reverts the transaction back to a specific savepoint, keeping the previous operations intact.
COMMIT: Finalizes all changes made in the transaction, including those after the savepoint.
ROLLBACK (without SAVEPOINT): Undoes the entire transaction.

Example (SQL)
START TRANSACTION;
INSERT INTO employees (name, department) VALUES ('Alice', 'HR');
SAVEPOINT sp1;
INSERT INTO employees (name, department) VALUES ('Bob', 'Finance');
ROLLBACK TO sp1; -- Undoes Bob's insertion but keeps Alice's
COMMIT; -- Saves Alice's insertion permanently

2. When is it useful to use savepoints in a database transaction? 
Ans.
SAVEPOINTs are useful in scenarios where you need partial rollbacks within a transaction. Here are some key use cases:
Error Handling & Recovery
If part of a transaction fails, you can roll back to a specific savepoint instead of undoing the entire transaction.
Example: Inserting multiple records, but one violates a constraint—rollback only that part.
Complex Transactions
When performing multiple dependent operations, SAVEPOINTs allow you to test intermediate results and roll back selectively if needed.
Conditional Rollbacks
If certain conditions aren’t met (e.g., insufficient funds in a banking system), rollback only part of 
the transaction while keeping valid changes.
Performance Optimization
Instead of restarting an entire transaction due to an error, rolling back to a savepoint saves time and resources.
Nested Transactions Simulation
Since many databases don’t support true nested transactions, SAVEPOINTs help simulate them by rolling back 
sub-transactions within a larger transaction.

Example Scenario (Bank Transfer)

START TRANSACTION;
UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
SAVEPOINT sp1;
UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;
-- If second update fails (e.g., account doesn't exist)
ROLLBACK TO sp1;
COMMIT;
 
LAB EXERCISES: 
 
 Lab 1: Perform a transaction where you create a savepoint, insert records, then rollback to 
the savepoint. 
Ans.
mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> SAVEPOINT before_insert;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into bankaccounts(account_number,funds) values (4525989,50000);
Query OK, 1 row affected (0.05 sec)

mysql> ROLLBACK TO SAVEPOINT before_insert;
Query OK, 0 rows affected (0.06 sec)

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

 Lab 2: Commit part of a transaction after using a savepoint and then rollback the remaining changes. 
mysql> START TRANSACTION;
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO bankaccounts(account_number, funds) VALUES (4525989, 50000);
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO bankaccounts(account_number, funds) VALUES (6823445, 55000);
Query OK, 1 row affected (0.00 sec)

mysql> SAVEPOINT b_third_insert;
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO bankaccounts(account_number, funds) VALUES (8542356, 45000);
Query OK, 1 row affected (0.00 sec)

mysql> ROLLBACK TO SAVEPOINT b_third_insert;
Query OK, 0 rows affected (0.00 sec)

mysql> commit;
Query OK, 0 rows affected (0.13 sec)

mysql> select * from bankaccounts;
+----+----------------+----------+
| id | account_number | funds    |
+----+----------------+----------+
| 11 | 4525989        | 50000.00 |
| 12 | 6823445        | 55000.00 |
+----+----------------+----------+
2 rows in set (0.00 sec)

 
1. Introduction to SQL  
 
LAB EXERCISES: 
 
 Lab 3: Create a database called library_db and a table books with columns: book_id, 
title, author, publisher, year_of_publication, and price. Insert five records into 
the table.
Ans. CREATE DATABASE library_db;
USE library_db;
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    publisher VARCHAR(255),
    year_of_publication INT,
    price DECIMAL(10,2)
);
INSERT INTO books (title, author, publisher, year_of_publication, price) VALUES
('The Great Gatsby', 'F. Scott Fitzgerald', 'Scribner', 1925, 10.99),
('To Kill a Mockingbird', 'Harper Lee', 'J.B. Lippincott & Co.', 1960, 7.99),
('1984', 'George Orwell', 'Secker & Warburg', 1949, 8.99),
('Moby-Dick', 'Herman Melville', 'Harper & Brothers', 1851, 12.50),
('Pride and Prejudice', 'Jane Austen', 'T. Egerton', 1813, 9.75);
 
 Lab 4: Create a table members in library_db with columns: member_id, member_name, 
date_of_membership, and email. Insert five records into this table.
Ans.
CREATE TABLE members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    member_name VARCHAR(100) NOT NULL,
    date_of_membership DATE NOT NULL,
    email VARCHAR(255) UNIQUE
);
mysql> INSERT INTO members (member_name, date_of_membership, email) VALUES
    -> ('Ayansh','2023-05-15','ayansh@gmail.com'),
    -> ('Rohan','2024-11-21','rohan@gmail.com'),
    -> ('Naitika','2021-12-25','naitika@gmail.com'),
    -> ('ronak','2014-05-06','ronak@gmail.com'),
    -> ('ram','2016-08-16','ram@gmail.com');
Query OK, 5 rows affected (0.10 sec)
Records: 5  Duplicates: 0  Warnings: 0

2. SQL Syntax  
 
LAB EXERCISES: 
 
 Lab 3: Retrieve all members who joined the library before 2022. Use appropriate SQL syntax 
with WHERE and ORDER BY. 
Ans.
mysql> select member_name,date_of_membership from members where date_of_membership < '2022-01-01' order by date_of_membership ASC;
+-------------+--------------------+
| member_name | date_of_membership |
+-------------+--------------------+
| ronak       | 2014-05-06         |
| ram         | 2016-08-16         |
| Naitika     | 2021-12-25         |
+-------------+--------------------+
3 rows in set (0.06 sec)

 Lab 4: Write SQL queries to display the titles of books published by a specific author. Sort the 
results by year_of_publication in descending order.
Ans.
mysql> SELECT title, year_of_publication
    -> FROM books
    -> WHERE author = 'R.K. Narayan'
    -> ORDER BY year_of_publication DESC;
+-----------+---------------------+
| title     | year_of_publication |
+-----------+---------------------+
| The Guide |                1958 |
+-----------+---------------------+
1 row in set (0.00 sec)

3. SQL Constraints  
 
LAB EXERCISES: 
 
 Lab 3: Add a CHECK constraint to ensure that the price of books in the books table is 
greater than 0. 
Ans.
mysql> ALTER TABLE books
    -> ADD CONSTRAINT chk_price CHECK (price > 0);
Query OK, 5 rows affected (1.06 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> INSERT INTO books (title, author, publisher, year_of_publication, price)
    -> VALUES ('Invalid Book', 'Author Name', 'Publisher', 2024, 0);
ERROR 3819 (HY000): Check constraint 'chk_price' is violated.

 Lab 4: Modify the members table to add a UNIQUE constraint on the email column, 
ensuring that each member has a unique email address.
Ans.
mysql> alter table members add constraint unique_email unique (email);
Query OK, 0 rows affected, 1 warning (0.75 sec)
Records: 0  Duplicates: 0  Warnings: 1

mysql> desc members;
+--------------------+--------------+------+-----+---------+----------------+
| Field              | Type         | Null | Key | Default | Extra          |
+--------------------+--------------+------+-----+---------+----------------+
| member_id          | int          | NO   | PRI | NULL    | auto_increment |
| member_name        | varchar(100) | NO   |     | NULL    |                |
| date_of_membership | date         | NO   |     | NULL    |                |
| email              | varchar(255) | YES  | UNI | NULL    |                |
+--------------------+--------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

mysql> select * from members;
+-----------+-------------+--------------------+-------------------+
| member_id | member_name | date_of_membership | email             |
+-----------+-------------+--------------------+-------------------+
|         1 | Ayansh      | 2023-05-15         | ayansh@gmail.com  |
|         2 | Rohan       | 2024-11-21         | rohan@gmail.com   |
|         3 | Naitika     | 2021-12-25         | naitika@gmail.com |
|         4 | ronak       | 2014-05-06         | ronak@gmail.com   |
|         5 | ram         | 2016-08-16         | ram@gmail.com     |
+-----------+-------------+--------------------+-------------------+
5 rows in set (0.00 sec)

mysql> insert into members values('6','Mehul','2018-07-19','ram@gmail.com');
ERROR 1062 (23000): Duplicate entry 'ram@gmail.com' for key 'members.email'
mysql> select * from members;
+-----------+-------------+--------------------+-------------------+
| member_id | member_name | date_of_membership | email             |
+-----------+-------------+--------------------+-------------------+
|         1 | Ayansh      | 2023-05-15         | ayansh@gmail.com  |
|         2 | Rohan       | 2024-11-21         | rohan@gmail.com   |
|         3 | Naitika     | 2021-12-25         | naitika@gmail.com |
|         4 | ronak       | 2014-05-06         | ronak@gmail.com   |
|         5 | ram         | 2016-08-16         | ram@gmail.com     |
+-----------+-------------+--------------------+-------------------+
5 rows in set (0.00 sec)

We can also use modify for example,
ALTER TABLE members MODIFY COLUMN email VARCHAR(255) NOT NULL UNIQUE;

4. Main SQL Commands and Sub-commands (DDL)  
 
LAB EXERCISES: 
 
 Lab 3: Create a table authors with the following columns: author_id, first_name, 
last_name, and country. Set author_id as the primary key. 
Ans.
mysql> create table authors (author_id int primary key auto_increment, first_name varchar(50), last_name varchar(50),country varchar(50));
Query OK, 0 rows affected (0.43 sec)

mysql> desc authors;
+------------+-------------+------+-----+---------+----------------+
| Field      | Type        | Null | Key | Default | Extra          |
+------------+-------------+------+-----+---------+----------------+
| author_id  | int         | NO   | PRI | NULL    | auto_increment |
| first_name | varchar(50) | YES  |     | NULL    |                |
| last_name  | varchar(50) | YES  |     | NULL    |                |
| country    | varchar(50) | YES  |     | NULL    |                |
+------------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)


 Lab 4: Create a table publishers with columns: publisher_id, publisher_name, 
contact_number, and address. Set publisher_id as the primary key and 
contact_number as unique.
Ans.
mysql> create table publishers (publisher_id int primary key auto_increment, publisher_name varchar(50), contact_number int not null unique, address varchar(100));
Query OK, 0 rows affected (0.49 sec)

mysql> desc publishers;
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| publisher_id   | int          | NO   | PRI | NULL    | auto_increment |
| publisher_name | varchar(50)  | YES  |     | NULL    |                |
| contact_number | int          | NO   | UNI | NULL    |                |
| address        | varchar(50)  | YES  |     | NULL    |                |
+----------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

5. ALTER Command  
 
LAB EXERCISES: 
 
 Lab 3: Add a new column genre to the books table. Update the genre for all existing 
records. 
Ans.
mysql> alter table books add column genre varchar(50);
Query OK, 0 rows affected (0.32 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc books;
+---------------------+---------------+------+-----+---------+----------------+
| Field               | Type          | Null | Key | Default | Extra          |
+---------------------+---------------+------+-----+---------+----------------+
| book_id             | int           | NO   | PRI | NULL    | auto_increment |
| title               | varchar(255)  | NO   |     | NULL    |                |
| author              | varchar(255)  | NO   |     | NULL    |                |
| publisher           | varchar(255)  | YES  |     | NULL    |                |
| year_of_publication | int           | YES  |     | NULL    |                |
| price               | decimal(10,2) | YES  |     | NULL    |                |
| genre               | varchar(50)   | YES  |     | NULL    |                |
+---------------------+---------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)

mysql> select * from books;
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+-------+
| book_id | title                   | author                 | publisher                   | year_of_publication | price | genre |
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+-------+
|       1 | The Guide               | R.K. Narayan           | Indian Thought Publications |                1958 | 15.99 | NULL  |
|       2 | Midnight?s Children     | Salman Rushdie         | Jonathan Cape               |                1981 | 12.50 | NULL  |
|       3 | Train to Pakistan       | Khushwant Singh        | Chatto & Windus             |                1956 | 10.99 | NULL  |
|       4 | The God of Small Things | Arundhati Roy          | IndiaInk                    |                1997 |  9.99 | NULL  |
|       5 | Wings of Fire           | Dr. A.P.J. Abdul Kalam | Universities Press          |                1999 |  8.50 | NULL  |
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+-------+
5 rows in set (0.00 sec)

mysql> update books set genre = 'Fiction' where book_id = 1;
Query OK, 1 row affected (0.08 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update books set genre = 'Historical Fiction' where book_id = 2;
Query OK, 1 row affected (0.16 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update books set genre = 'Historical Fiction' where book_id = 3;
Query OK, 1 row affected (0.10 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update books set genre = 'Literary Fiction' where book_id = 4;
Query OK, 1 row affected (0.08 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update books set genre = 'Autobiography' where book_id = 5;
Query OK, 1 row affected (0.10 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from books;
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+--------------------+
| book_id | title                   | author                 | publisher                   | year_of_publication | price | genre              |
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+--------------------+
|       1 | The Guide               | R.K. Narayan           | Indian Thought Publications |                1958 | 15.99 | Fiction            |
|       2 | Midnight?s Children     | Salman Rushdie         | Jonathan Cape               |                1981 | 12.50 | Historical Fiction |
|       3 | Train to Pakistan       | Khushwant Singh        | Chatto & Windus             |                1956 | 10.99 | Historical Fiction |
|       4 | The God of Small Things | Arundhati Roy          | IndiaInk                    |                1997 |  9.99 | Literary Fiction   |
|       5 | Wings of Fire           | Dr. A.P.J. Abdul Kalam | Universities Press          |                1999 |  8.50 | Autobiography      |
+---------+-------------------------+------------------------+-----------------------------+---------------------+-------+--------------------+
5 rows in set (0.00 sec)


 Lab 4: Modify the members table to increase the length of the email column to 100 
characters. 
Ans.
mysql> alter table members modify email varchar(100);
Query OK, 5 rows affected (1.52 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> desc members;
+--------------------+--------------+------+-----+---------+----------------+
| Field              | Type         | Null | Key | Default | Extra          |
+--------------------+--------------+------+-----+---------+----------------+
| member_id          | int          | NO   | PRI | NULL    | auto_increment |
| member_name        | varchar(100) | NO   |     | NULL    |                |
| date_of_membership | date         | NO   |     | NULL    |                |
| email              | varchar(100) | YES  | UNI | NULL    |                |
+--------------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

 
6. DROP Command  
 
LAB EXERCISES: 
 
 Lab 3: Drop the publishers table from the database after verifying its structure. 
Ans.
mysql> desc publishers;
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| publisher_id   | int          | NO   | PRI | NULL    | auto_increment |
| publisher_name | varchar(50)  | YES  |     | NULL    |                |
| contact_number | int          | NO   | UNI | NULL    |                |
| address        | varchar(100) | YES  |     | NULL    |                |
+----------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> drop table publishers;
Query OK, 0 rows affected (0.27 sec)

 Lab 4: Create a backup of the members table and then drop the original members table. 
Ans.
mysql> CREATE TABLE members_backup AS SELECT * FROM members;
Query OK, 5 rows affected (0.78 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM members_backup;
+-----------+-------------+--------------------+-------------------+
| member_id | member_name | date_of_membership | email             |
+-----------+-------------+--------------------+-------------------+
|         1 | Ayansh      | 2023-05-15         | ayansh@gmail.com  |
|         2 | Rohan       | 2024-11-21         | rohan@gmail.com   |
|         3 | Naitika     | 2021-12-25         | naitika@gmail.com |
|         4 | ronak       | 2014-05-06         | ronak@gmail.com   |
|         5 | ram         | 2016-08-16         | ram@gmail.com     |
+-----------+-------------+--------------------+-------------------+
5 rows in set (0.00 sec)

mysql> DROP TABLE members;
Query OK, 0 rows affected (0.26 sec)

mysql> SHOW TABLES;
+----------------------+
| Tables_in_library_db |
+----------------------+
| authors              |
| books                |
| members_backup       |
+----------------------+
3 rows in set (0.00 sec)
 
7. Data Manipulation Language (DML)  
 
LAB EXERCISES: 
 
 Lab 4: Insert three new authors into the authors table, then update the last name of one of 
the authors. 
mysql> insert into authors (author_id, first_name, last_name, country)values
    -> (1,'Ram','Narayan','India'),
    -> (2,'Mark','Twain','USA'),
    -> (3,'Salman','khan','India/United Kingdom');
Query OK, 3 rows affected (0.13 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> update authors set last_name = 'Rushdie' where author_id = 3;
Query OK, 1 row affected (0.11 sec)
Rows matched: 1  Changed: 1  Warnings: 0

 Lab 5: Delete a book from the books table where the price is higher than $100. 
 Ans.
 mysql> delete from books where price > 100;
Query OK, 1 row affected (0.09 sec)

 
8. UPDATE Command  
 
LAB EXERCISES: 
 
 Lab 3: Update the year_of_publication of a book with a specific book_id. 
Ans.
mysql> update books set year_of_publication = 2000 where book_id = 4;
Query OK, 1 row affected (0.08 sec)
Rows matched: 1  Changed: 1  Warnings: 0


 Lab 4: Increase the price of all books published before 2015 by 10%. 
 Ans.
 mysql> update books set price = price * 1.10 where year_of_publication < 2015;
Query OK, 3 rows affected, 3 warnings (0.10 sec)
Rows matched: 3  Changed: 3  Warnings: 3
 
9. DELETE Command  
 
LAB EXERCISES: 
 
 Lab 3: Remove all members who joined before 2020 from the members table. 
Ans. mysql> delete from members_backup where date_of_membership < '2020-01-01';
Query OK, 2 rows affected (0.09 sec)

 Lab 4: Delete all books that have a NULL value in the author column. 
 Ans.
 delete from books where author is null;
 Query OK, 1 row affected (0.08 sec)

10. Data Query Language (DQL)  
 
LAB EXERCISES: 
 
 Lab 4: Write a query to retrieve all books with price between $50 and $100. 
Ans.
mysql> select * from books where (price between 50 and 100);
+---------+-------------------------+---------------+-----------+---------------------+--------+------------------+
| book_id | title                   | author        | publisher | year_of_publication | price  | genre            |
+---------+-------------------------+---------------+-----------+---------------------+--------+------------------+
|       4 | The God of Small Things | Arundhati Roy | IndiaInk  |                2016 | 100.00 | Literary Fiction |
+---------+-------------------------+---------------+-----------+---------------------+--------+------------------+
1 row in set (0.00 sec)

Lab 5: Retrieve the list of books sorted by author in ascending order and limit the results 
to the top 3 entries.
mysql> select title from books order by author ASC limit 3;
+-------------------------+
| title                   |
+-------------------------+
| The God of Small Things |
| Train to Pakistan       |
| The Guide               |
+-------------------------+
3 rows in set (0.00 sec)

13. Transaction Control Language (TCL)  
 
LAB EXERCISES: 
 
 Lab 3: Use COMMIT after inserting multiple records into the books table, then make another 
insertion and perform a ROLLBACK. 
Ans.
mysql> START TRANSACTION;
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO books VALUES
    -> (5, 'Final stage', 'R.K. Narayan', 'indiaink', 2015, 50.5, 'Fiction'),
    -> (6, 'Prakriti', 'Sanjay Bachhav', 'Indian publisher', 2024, 150, 'Crime');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> COMMIT; 
Query OK, 0 rows affected (0.07 sec)

mysql> START TRANSACTION; 
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO books VALUES
    -> (7, 'stage', 'R.K. Narayan', 'indiaink', 2025, 200, 'Crime');
Query OK, 1 row affected (0.00 sec)

mysql> ROLLBACK;
Query OK, 0 rows affected (0.05 sec)

mysql> select * from books;
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+
| book_id | title                   | author          | publisher                   | year_of_publication | price  | genre              |
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+
|       1 | The Guide               | R.K. Narayan    | Indian Thought Publications |                1958 |  19.35 | Fiction            |
|       2 | Midnight?s Children     | Salman Rushdie  | Jonathan Cape               |                1981 |  15.13 | Historical Fiction |
|       3 | Train to Pakistan       | Khushwant Singh | Chatto & Windus             |                1956 |  13.30 | Historical Fiction |
|       4 | The God of Small Things | Arundhati Roy   | IndiaInk                    |                2016 | 100.00 | Literary Fiction   |
|       5 | Final stage             | R.K. Narayan    | indiaink                    |                2015 |  50.50 | Fiction            |
|       6 | Prakriti                | Sanjay Bachhav  | Indian publisher            |                2024 | 150.00 | Crime              |
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+
6 rows in set (0.00 sec)


 Lab 4: Set a SAVEPOINT before making updates to the members table, perform some 
updates, and then roll back to the SAVEPOINT. 
 Ans.
 mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> savepoint before_update;
Query OK, 0 rows affected (0.00 sec)


mysql> select * from members_backup;
+-----------+-------------+--------------------+-------------------+
| member_id | member_name | date_of_membership | email             |
+-----------+-------------+--------------------+-------------------+
|         1 | Ayansh      | 2023-05-15         | ayansh@gmail.com  |
|         2 | Rohan       | 2024-11-21         | rohan@gmail.com   |
|         3 | Naitika     | 2021-12-25         | naitika@gmail.com |
+-----------+-------------+--------------------+-------------------+
3 rows in set (0.00 sec)


mysql> update members_backup set date_of_membership = '2018-11-26' where member_id = 3;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> rollback to savepoint before_update;
Query OK, 0 rows affected (0.10 sec)

mysql> commit;
Query OK, 0 rows affected (0.00 sec)
 
14. SQL Joins  
 
LAB EXERCISES: 
 
 Lab 3: Perform an INNER JOIN between books and authors tables to display the title 
of books and their respective authors' names.
Ans.
mysql> select books.title, authors.first_name, authors.last_name from books inner join authors on
    ->  books.author_id = authors.author_id;
+---------------------+------------+-----------+
| title               | first_name | last_name |
+---------------------+------------+-----------+
| The Guide           | Ram        | Narayan   |
| Midnight?s Children | Salman     | Rushdie   |
| Final stage         | Ram        | Narayan   |
+---------------------+------------+-----------+
3 rows in set (0.00 sec) 

 Lab 4: Use a FULL OUTER JOIN to retrieve all records from the books and authors 
tables, including those with no matching entries in the other table. 

mysql> select books.book_id, books.title, books.author, books.publisher, books.year_of_publication, books. price, books.genre, authors.author_id, authors.first_name, authors.last_name, authors_country from books
    -> left join authors on books.book_id = authors.author_id
    -> union
    -> select books.book_id, books.title, books.author, books.publisher, books.year_of_publication, books. price, books.genre, authors.author_id, authors.first_name, authors.last_name, authors_country from books
    -> right join authors on books.author_id = authors.author_id;
ERROR 1054 (42S22): Unknown column 'authors_country' in 'field list'
mysql> select books.book_id, books.title, books.author, books.publisher, books.year_of_publication, books. price, books.genre, authors.author_id, authors.first_name, authors.last_name, authors.country from books
    -> left join authors on books.author_id = authors.author_id
    -> union
    -> select books.book_id, books.title, books.author, books.publisher, books.year_of_publication, books. price, books.genre, authors.author_id, authors.first_name, authors.last_name, authors.country from books
    -> right join authors on books.author_id = authors.author_id;
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+-----------+------------+-----------+----------------------+
| book_id | title                   | author          | publisher                   | year_of_publication | price  | genre              | author_id | first_name | last_name | country              |
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+-----------+------------+-----------+----------------------+
|       1 | The Guide               | R.K. Narayan    | Indian Thought Publications |                1958 |  19.35 | Fiction            |         1 | Ram        | Narayan   | India                |
|       2 | Midnight?s Children     | Salman Rushdie  | Jonathan Cape               |                1981 |  15.13 | Historical Fiction |         3 | Salman     | Rushdie   | India/United Kingdom |
|       3 | Train to Pakistan       | Khushwant Singh | Chatto & Windus             |                1956 |  13.30 | Historical Fiction |      NULL | NULL       | NULL      | NULL                 |
|       4 | The God of Small Things | Arundhati Roy   | IndiaInk                    |                2016 | 100.00 | Literary Fiction   |      NULL | NULL       | NULL      | NULL                 |
|       5 | Final stage             | R.K. Narayan    | indiaink                    |                2015 |  50.50 | Fiction            |         1 | Ram        | Narayan   | India                |
|       6 | Prakriti                | Sanjay Bachhav  | Indian publisher            |                2024 | 150.00 | Crime              |      NULL | NULL       | NULL      | NULL                 |
|    NULL | NULL                    | NULL            | NULL                        |                NULL |   NULL | NULL               |         2 | Mark       | Twain     | USA                  |
+---------+-------------------------+-----------------+-----------------------------+---------------------+--------+--------------------+-----------+------------+-----------+----------------------+
7 rows in set (0.00 sec)

15. SQL Group By  
 
LAB EXERCISES: 
 
 Lab 3: Group books by genre and display the total number of books in each genre . 
Ans.
mysql> select genre, count(*) as 'total_number_of_books' from books group by genre;
+--------------------+-----------------------+
| genre              | total_number_of_books |
+--------------------+-----------------------+
| Fiction            |                     2 |
| Historical Fiction |                     2 |
| Literary Fiction   |                     1 |
| Crime              |                     1 |
+--------------------+-----------------------+
4 rows in set (0.15 sec)

 Lab 4: Group members by the year they joined and find the number of members who joined 
each year. 
Ans.
mysql> SELECT YEAR(date_of_membership) AS membership_year, COUNT(*) AS total_members
    -> FROM members_backup
    -> GROUP BY membership_year;
+-----------------+---------------+
| membership_year | total_members |
+-----------------+---------------+
|            2023 |             1 |
|            2021 |             2 |
+-----------------+---------------+
2 rows in set (0.00 sec)
 
 
16. SQL Stored Procedure  
 
LAB EXERCISES: 
 
 Lab 3: Write a stored procedure to retrieve all books by a particular author.
 Ans.
 
DELIMITER //

CREATE PROCEDURE get_books_by_author(IN author_name VARCHAR(255))
BEGIN
    SELECT title 
    FROM books 
    WHERE author = author_name;
END //

DELIMITER ;
mysql> call get_books_by_author('R.K. Narayan');
+-------------+
| title       |
+-------------+
| The Guide   |
| Final stage |
+-------------+
2 rows in set (0.06 sec)

Query OK, 0 rows affected (0.09 sec)

 Lab 4: Write a stored procedure that takes book_id as an argument and returns the price 
of the book. 
 Ans.
 mysql> DELIMITER //
mysql>
mysql> CREATE PROCEDURE get_book_price(IN bookID INT, OUT bookPrice DECIMAL(10,2))
    -> BEGIN
    ->     SELECT price INTO bookPrice FROM books WHERE book_id = bookID;
    -> END //
Query OK, 0 rows affected (0.13 sec)

mysql>
mysql> DELIMITER ;
mysql> CALL get_book_price(1, @price);
Query OK, 1 row affected (0.05 sec)

mysql> SELECT @price AS book_price;
+------------+
| book_price |
+------------+
|      19.35 |
+------------+
 
17. SQL View  
 
LAB EXERCISES: 
 
 Lab 3: Create a view to show only the title, author, and price of books from the books 
table. 
mysql> CREATE VIEW book_details AS
    -> SELECT title, author, price
    -> FROM books;
Query OK, 0 rows affected (0.13 sec)

mysql> SELECT * FROM book_details
    -> ;
+-------------------------+-----------------+--------+
| title                   | author          | price  |
+-------------------------+-----------------+--------+
| The Guide               | R.K. Narayan    |  19.35 |
| Midnight?s Children     | Salman Rushdie  |  15.13 |
| Train to Pakistan       | Khushwant Singh |  13.30 |
| The God of Small Things | Arundhati Roy   | 100.00 |
| Final stage             | R.K. Narayan    |  50.50 |
| Prakriti                | Sanjay Bachhav  | 150.00 |
+-------------------------+-----------------+--------+
6 rows in set (0.00 sec)

 Lab 4: Create a view to display members who joined before 2020. 
 mysql> create view members_joined AS
    -> select member_name from members_backup where date_of_membership < '2020-01-01';
Query OK, 0 rows affected (0.12 sec)

mysql> select * from members_joined;
+--------------+
| member_name  |
+--------------+
| Mukesh Godia |
+--------------+
1 row in set (0.00 sec)
 
18. SQL Trigger  
 
LAB EXERCISES: 
 
 Lab 3: Create a trigger to automatically update the last_modified timestamp of the 
books table whenever a record is updated. 
Ans. 
mysql> ALTER TABLE books
    -> ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
Query OK, 0 rows affected (0.34 sec)

Records: 0  Duplicates: 0  Warnings: 0
mysql> create trigger last_update before update on books
    -> for each row
    -> set new.last_modified = now();
    -> //
Query OK, 0 rows affected (0.23 sec)

mysql> delimiter ;


 Lab 4: Create a trigger that inserts a log entry into a log_changes table whenever a 
DELETE operation is performed on the books table. 
 mysql> delimiter //
mysql> create trigger books_bd before delete on books
    -> for each row
    -> insert into log_changes (book_id, title) values(old.book_id,old.title);
    -> //
Query OK, 0 rows affected (0.14 sec)

mysql> delimiter ;
mysql> select * from log_changes;
Empty set (0.00 sec)

mysql>  delete from books where book_id =6;
Query OK, 1 row affected (0.13 sec)

mysql> select * from log_changes;
+--------+---------+----------+---------------------+
| log_id | book_id | title    | deleted_datetime    |
+--------+---------+----------+---------------------+
|      1 |       6 | Prakriti | 2025-03-29 12:18:06 |
+--------+---------+----------+---------------------+
1 row in set (0.00 sec)
 
23. Rollback and Commit Savepoint  
 
LAB EXERCISES: 
 
 Lab 3: Perform a transaction that includes inserting a new member, setting a SAVEPOINT, 
and rolling back to the savepoint after making updates. 
Ans.
mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into values(5,'Kalpana Godia','2025-03-29','kalpana@yahoo.com');
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'values(5,'Kalpana Godia','2025-03-29','kalpana@yahoo.com')' at line 1
mysql> insert into members_backup values(5,'Kalpana Godia','2025-03-29','kalpana@yahoo.com');
Query OK, 1 row affected (0.00 sec)

mysql> savepoint after_insert;
Query OK, 0 rows affected (0.00 sec)

mysql> update members_backup set email = 'kalpanagodia@yahoo.in' where member_id = 4;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> rollback to savepoint after_insert;
Query OK, 0 rows affected (0.00 sec)

mysql> commit;
Query OK, 0 rows affected (0.07 sec)

Note( Expected Output (Without the Email Update))

 Lab 4: Use COMMIT after successfully inserting multiple books into the books table, then use 
ROLLBACK to undo a set of changes made after a savepoint.
Ans.
START TRANSACTION;

INSERT INTO books (book_id, title, author, publisher, year_of_publication, price, genre, author_id) 
VALUES 
(7, 'Inferno', 'Dan Brown', 'Doubleday', 2013, 25.50, 'Thriller', 2),
(8, 'The Alchemist', 'Paulo Coelho', 'HarperCollins', 1988, 19.99, 'Fiction', 3);

COMMIT;

START TRANSACTION;

SAVEPOINT after_insert;

-- Update book prices
UPDATE books SET price = price + 5 WHERE book_id = 7;
UPDATE books SET price = price + 10 WHERE book_id = 8;

ROLLBACK TO SAVEPOINT after_insert;

COMMIT;


SELECT * FROM books WHERE book_id IN (7, 8);

Note(Expected Output (Prices Remain Unchanged))