Module 4 - Introduction to DBMS

Theory Question:

1. What is SQL, and why is it essential in database management?
Ans. SQL stand for Structured Query Language is a programming language for storing and processing information in a relational database.
 A relational database stores information in tabular form, with rows and columns representing different data attributes and the various 
 relationships between the data values.

* Data Retrieval & Manipulation – SQL enables querying databases to retrieve specific data using commands 
  like SELECT, INSERT, UPDATE, and DELETE.
* Database Structure Management – It allows users to define and modify database structures with CREATE, ALTER, and DROP statements.
* Data Integrity & Security – SQL supports constraints (e.g., PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK) to 
  maintain data accuracy and provides user permissions via GRANT and REVOKE.
* Scalability & Performance – It helps in optimizing query performance through indexing and efficient data structuring.
* Widely Used & Standardized – SQL is supported by most database management systems (DBMS) like MySQL, PostgreSQL, SQL Server, and Oracle.

2.  Explain the difference between DBMS and RDBMS. 
Ans. DBMS: 
     1. DBMS stand for Database Management System.
     2. DBMS store data as a files.
     3. Data elements need to access individually.
     4. No relationship between data.
     5. May not support normalization, leading to redundancy.
     6. Limited constraints for ensuring data accuracy.
     7. Basic security features.
     8. Example, File systems, XML databases, NoSQL databases.

     RDMS:
     1. RDMS stand for Relational Database Management System.
     2. RDBMS stores data in tabular form.
     3. Multiple data elements can be accessed at the same time.
     4. Data is stored in the form of tables which are related to each other.
     5. Follows normalization rules to reduce redundancy.
     6. Enforces constraints like PRIMARY KEY, FOREIGN KEY, etc.
     7. Advanced security, including user roles and access control.
     8. Example, MySQL, PostgreSQL, SQL Server, Oracle.

3. Describe the role of SQL in managing relational databases.
Ans. SQL (Structured Query Language) is the core tool for interacting with Relational Database Management Systems (RDBMS).
 It helps in organizing, managing, and retrieving structured data efficiently. Here’s how SQL plays a crucial role in RDBMS:

1. Data Definition (DDL - Data Definition Language)
SQL helps in defining and managing database structures.
CREATE TABLE – Defines a new table.
ALTER TABLE – Modifies an existing table.
DROP TABLE – Deletes a table.

2. Data Manipulation (DML - Data Manipulation Language)
SQL allows users to insert, update, delete, and retrieve data.
INSERT INTO – Adds new records.
UPDATE – Modifies existing records.
DELETE – Removes records.
SELECT – Retrieves data.

3. Data Retrieval & Querying (DQL - Data Query Language)
SQL enables complex data retrieval using SELECT, including filtering, sorting, and aggregating data.
WHERE – Filters records.
ORDER BY – Sorts results.
GROUP BY – Groups records.
JOIN – Combines data from multiple tables.

4. Transaction Management (TCL - Transaction Control Language)
SQL ensures data consistency and reliability through transactions.
COMMIT – Saves changes permanently.
ROLLBACK – Reverts changes in case of failure.
SAVEPOINT – Sets checkpoints within a transaction.

5. User Access Control & Security (DCL - Data Control Language)
SQL provides security features for managing user permissions.
GRANT – Provides access to users.
REVOKE – Removes access from users.

6. Data Integrity & Constraints
SQL ensures data consistency and accuracy by enforcing constraints like:
PRIMARY KEY – Ensures unique records.
FOREIGN KEY – Maintains relationships between tables.
UNIQUE – Prevents duplicate values.
CHECK – Defines conditions for valid data.

4. What are the key features of SQL? 
SQL is like the brain behind relational databases, helping you store, retrieve, and manage data efficiently. 
key features of SQL:

1. Data Definition Language (DDL): SQL provides a set of commands to define and modify the structure of a database, 
   including creating tables, modifying table structure, and dropping tables.

2. Data Manipulation Language (DML): SQL provides a set of commands to manipulate data within a database, 
   including adding, modifying, and deleting data.

3. Data Query Language(DQL): SQL provides a rich set of commands for querying a database to retrieve data,
   including the ability to filter, sort, group, and join data from multiple tables.

4. Transaction Control Language(TCL): SQL supports transaction processing, which allows users to group a set of 
   database operations into a single transaction that can be rolled back in case of failure.

5. User Access Control (DCL Data Control Language): SQL provides mechanisms to control user access to a database, 
   including the ability to grant and revoke privileges to perform certain operations on the database.

6. Data Integrity: SQL includes features to enforce data integrity, such as the ability to specify constraints on 
   the values that can be inserted or updated in a table, and to enforce referential integrity between tables.

7. Portability: SQL is a standardized language, meaning that SQL code written for one database management 
   system can be used on another system with minimal modification.

 
LAB EXERCISES: 
 
 Lab 1: Create a new database named school_db and a table called students with the 
following columns: student_id, student_name, age, class, and address. 

mysql> create database school_db;
Query OK, 1 row affected (0.36 sec)

mysql> use school_db;
Database changed
mysql> create table students (student_id int primary key auto_increment, student_name varchar(50), age int, class varchar(50), address varchar(50));
Query OK, 0 rows affected (0.53 sec)

mysql> describe students;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| student_id   | int         | NO   | PRI | NULL    | auto_increment |
| student_name | varchar(50) | YES  |     | NULL    |                |
| age          | int         | YES  |     | NULL    |                |
| class        | varchar(50) | YES  |     | NULL    |                |
| address      | varchar(50) | YES  |     | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
5 rows in set (0.29 sec)

 Lab 2: Insert five records into the students table and retrieve all records using the SELECT 
statement.
mysql> insert into students(student_id, student_name, age, class, address) values (101,"Aynash",6,"Grade 1","Manjalpur"),(102,"Naitika",10,"Grade 5","Mandvi"),
    -> (103, "Rudra",13,"Grade 8","Alkapuri"),(104, "Kavya",11,"Grade 6", "Wadi"),(105,"Payal",15,"Grade 10","Vasna");
Query OK, 5 rows affected (0.10 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from students;
+------------+--------------+------+----------+-----------+
| student_id | student_name | age  | class    | address   |
+------------+--------------+------+----------+-----------+
|        101 | Aynash       |    6 | Grade 1  | Manjalpur |
|        102 | Naitika      |   10 | Grade 5  | Mandvi    |
|        103 | Rudra        |   13 | Grade 8  | Alkapuri  |
|        104 | Kavya        |   11 | Grade 6  | Wadi      |
|        105 | Payal        |   15 | Grade 10 | Vasna     |
+------------+--------------+------+----------+-----------+
5 rows in set (0.06 sec)


2. SQL Syntax  
Theory Questions: 
 
1. What are the basic components of SQL syntax?
Ans. SQL (Structured Query Language) syntax consists of several key components that form the foundation of database operations. Here are the basic components:

1. Statements
SQL statements perform tasks such as retrieving, inserting, updating, or deleting data. Common statements include:
SELECT – Retrieves data from a database.
INSERT – Adds new data to a table.
UPDATE – Modifies existing data.
DELETE – Removes data from a table.
CREATE – Creates a database object (e.g., table, view, index).
DROP – Deletes a database object.
ALTER – Modifies an existing database object.

2. Clauses
Clauses are components of SQL statements that specify conditions or modify query behavior:
WHERE – Filters records based on a condition.
ORDER BY – Sorts query results.
GROUP BY – Groups records with aggregate functions.
HAVING – Filters grouped records.

3. Expressions
Expressions compute values and can include:
Arithmetic expressions (5 + 3, price * quantity).
String expressions (CONCAT(first_name, ' ', last_name)).
Boolean expressions (salary > 50000).

4. Functions
SQL provides built-in functions for data processing, including:
Aggregate functions (SUM(), AVG(), COUNT()).
String functions (UPPER(), LOWER(), LENGTH()).
Date functions (NOW(), DATEADD(), DATEDIFF()).

5. Joins
Joins combine data from multiple tables:
INNER JOIN – Returns matching records from both tables.
LEFT JOIN – Returns all records from the left table and matching ones from the right.
RIGHT JOIN – Returns all records from the right table and matching ones from the left.
FULL JOIN – Returns all records when there is a match in either table.

6. Operators
SQL supports various operators for filtering and comparing values:
Comparison operators (=, >, <, >=, <=, <>).
Logical operators (AND, OR, NOT).
Like and pattern matching (LIKE, IN, BETWEEN).
Set operators (UNION, INTERSECT, EXCEPT).

7. Keywords
Reserved words that define SQL operations:
DISTINCT – Removes duplicate results.
AS – Renames columns or tables.
LIMIT / TOP – Limits the number of results.

2. Write the general structure of an SQL SELECT statement.
Ans.The general structure of an SQL SELECT statement is:

SQL SELECT Statement:

SELECT column1, column2, ...
FROM table_name
WHERE condition
GROUP BY column
HAVING condition
ORDER BY column ASC|DESC
LIMIT number;

SELECT – Specifies the columns to retrieve.
FROM – Specifies the table from which to retrieve the data.
WHERE (Optional) – Filters records based on a condition.
GROUP BY (Optional) – Groups rows sharing a property (used with aggregate functions).
HAVING (Optional) – Filters groups (works like WHERE but on grouped data).
ORDER BY (Optional) – Sorts the results in ascending (ASC) or descending (DESC) order.
LIMIT (Optional) – Restricts the number of rows returned.

3. Explain the role of clauses in SQL statements. 
Ans.Role of Clauses in SQL Statements
Clauses in SQL are used to define specific conditions, modify query behavior, and control how data is retrieved or manipulated.
They help refine SQL statements by filtering, grouping, sorting, or limiting results.

Here are the key SQL clauses and their roles:

1. WHERE Clause
Filters records based on a specified condition.
Used in SELECT, UPDATE, and DELETE statements.

2. ORDER BY Clause
Sorts query results in ascending (ASC) or descending (DESC) order.
Default order is ASC (ascending).

3. GROUP BY Clause
Groups rows that have the same values in specified columns.
Often used with aggregate functions (COUNT(), SUM(), AVG(), etc.).

4. HAVING Clause
Filters grouped records (like WHERE, but for aggregated data).

5. JOIN Clause
Combines records from multiple tables based on related columns.

6. LIMIT Clause (or TOP in some databases)
Restricts the number of rows returned in the result.

7. DISTINCT Clause
Removes duplicate values from the result set.

8. UNION Clause
Combines results from multiple SELECT statements, removing duplicates.

 
LAB EXERCISES: 
 
 Lab 1: Write SQL queries to retrieve specific columns (student_name and age) from the 
students table. 
Ans.
mysql> select student_name,age from students;
+--------------+------+
| student_name | age  |
+--------------+------+
| Aynash       |    6 |
| Naitika      |   10 |
| Rudra        |   13 |
| Kavya        |   11 |
| Payal        |   15 |
+--------------+------+
5 rows in set (0.00 sec)

 Lab 2: Write SQL queries to retrieve all students whose age is greater than 10.
Ans.
mysql> select * from students where age > 10;
+------------+--------------+------+----------+----------+
| student_id | student_name | age  | class    | address  |
+------------+--------------+------+----------+----------+
|        103 | Rudra        |   13 | Grade 8  | Alkapuri |
|        104 | Kavya        |   11 | Grade 6  | Wadi     |
|        105 | Payal        |   15 | Grade 10 | Vasna    |
+------------+--------------+------+----------+----------+
3 rows in set (0.05 sec)

mysql>
3. SQL Constraints  
 
Theory Questions: 
 
1. What are constraints in SQL? List and explain the different types of constraints. 
In SQL, constraints are rules enforced on columns in a table to maintain data integrity and accuracy. Constraints help prevent invalid data entry and ensure the consistency of data within the database.

Types of Constraints in SQL
There are several types of constraints in SQL:

NOT NULL
Ensures that a column cannot have NULL values.
Used when a field must always have a value.

UNIQUE
Ensures that all values in a column are distinct.
Allows NULL values unless explicitly defined otherwise.

PRIMARY KEY
Uniquely identifies each record in a table.
Combines NOT NULL and UNIQUE constraints.
A table can have only one primary key.

FOREIGN KEY
Establishes a relationship between two tables.
Ensures that the value in a column exists in another table’s primary key column.

CHECK
Ensures that all values in a column meet a specific condition.

DEFAULT
Assigns a default value to a column if no value is provided.

INDEX (Not a constraint but helps in performance)
Improves retrieval speed for queries on specific columns.

2. How do PRIMARY KEY and FOREIGN KEY constraints differ? 
Ans.
PRIMARY KEY:
1. Definition - Uniquely identifies each record in a table.
2. Uniqueness - Must have unique values for each row.
3. NULL Values - Cannot contain NULL values.
4. Number per Table - Only one PRIMARY KEY per table.
5. Reference - Defined within the same table.
6. Data Integrity - Ensures unique identification of each record in a table.
7. Example,
   CREATE TABLE Students ( Student_ID INT PRIMARY KEY, Student_Name VARCHAR(50) );

FOREIGN KEY:
1. Definition - Establishes a relationship between two tables by referencing the PRIMARY KEY of another table.
2. Uniqueness - Can have duplicate values.
3. NULL Values - Can contain NULL values (if not explicitly set as NOT NULL).
4. Number per Table - A table can have multiple FOREIGN KEYS.
5. Reference - References a PRIMARY KEY from another table.
6. Data Integrity - Ensures referential integrity by preventing invalid data entry.
7. Example,
   CREATE TABLE Enrollments ( Enrollment_ID INT PRIMARY KEY, Student_ID INT, FOREIGN KEY (Student_ID) REFERENCES Students(Student_ID) );

3. What is the role of NOT NULL and UNIQUE constraints? 
Ans.
Role of NOT NULL and UNIQUE Constraints in SQL
1. NOT NULL Constraint
Ensures that a column cannot have NULL values.
Used when a field must always contain data.
Helps maintain data completeness and prevents missing values.

Example:

CREATE TABLE Employees (
    Employee_ID INT NOT NULL,
    Name VARCHAR(50) NOT NULL,
    Age INT
);
In this table:
Employee_ID and Name must have values.
Age can be NULL.

2. UNIQUE Constraint
Ensures that all values in a column are distinct.
Allows NULL values (except in databases where NULL is considered a duplicate).
Helps prevent duplicate entries in a specific column.

Example:

CREATE TABLE Customers (
    Customer_ID INT PRIMARY KEY,
    Email VARCHAR(100) UNIQUE
);
In this table:

Customer_ID (PRIMARY KEY) must be unique and cannot be NULL.
Email must be unique but can be NULL.

 
LAB EXERCISES: 
 
 Lab 1: Create a table teachers with the following columns: teacher_id (Primary Key), 
teacher_name (NOT NULL), subject (NOT NULL), and email (UNIQUE).
Ans:

mysql> create table teachers(teacher_id int primary key auto_increment, teacher_name varchar(50) NOT NULL,subject varchar(50) NOT NULL,email varchar(50) UNIQUE);
Query OK, 0 rows affected (0.98 sec)

mysql> describe teachers;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| teacher_id   | int         | NO   | PRI | NULL    | auto_increment |
| teacher_name | varchar(50) | NO   |     | NULL    |                |
| subject      | varchar(50) | NO   |     | NULL    |                |
| email        | varchar(50) | YES  | UNI | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

 Lab 2: Implement a FOREIGN KEY constraint to relate the teacher_id from the 
teachers table with the students table. 
Ans:

mysql> alter table students add column teacher_id int;
Query OK, 0 rows affected (0.29 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> alter table students add foreign key (teacher_id)  references teachers(teacher_id);
Query OK, 5 rows affected (1.77 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> describe students;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| student_id   | int         | NO   | PRI | NULL    | auto_increment |
| student_name | varchar(50) | YES  |     | NULL    |                |
| age          | int         | YES  |     | NULL    |                |
| class        | varchar(50) | YES  |     | NULL    |                |
| address      | varchar(50) | YES  |     | NULL    |                |
| teacher_id   | int         | YES  | MUL | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
6 rows in set (0.00 sec)

4. Main SQL Commands and Sub-commands (DDL)  
 
Theory Questions: 
 
1. Define the SQL Data Definition Language (DDL). 
Ans.
Data Definition Language (DDL) is a subset of SQL used to define, modify, and manage database schema structures, 
such as tables, indexes, and constraints. DDL commands do not manipulate data but instead focus on the structure of the database.

Key DDL Commands
CREATE – Creates new database objects like tables, views, and indexes.

        CREATE TABLE students (student_id INT PRIMARY KEY,name VARCHAR(100) NOT NULL,age INT);

ALTER – Modifies existing database structures (e.g., adding or removing columns).

        ALTER TABLE students ADD COLUMN grade VARCHAR(10);

DROP – Deletes database objects permanently (tables, views, indexes, etc.).

        DROP TABLE students;

TRUNCATE – Removes all records from a table without deleting the table structure.

        TRUNCATE TABLE students;

RENAME – Changes the name of an existing database object.

        ALTER TABLE students RENAME TO learners;

Key Characteristics of DDL
Defines database schema (tables, columns, constraints, etc.).
Automatically commits changes (DDL commands cannot be rolled back).
Does not manipulate data, only modifies the database structure.

2. Explain the CREATE command and its syntax. 
Ans:
CREATE Command in SQL
The CREATE command in SQL is part of Data Definition Language (DDL) 
and is used to create database objects such as tables, views, indexes, and databases.

1. Creating a Database
To create a new database:
Example,
CREATE DATABASE school;
This command creates a database named school.

You must have the necessary permissions to create a database.

2. Creating a Table
The CREATE TABLE statement defines a new table with columns and their data types.

Syntax:

CREATE TABLE table_name (
    column1 datatype constraints,
    column2 datatype constraints,
    ...
);

Example:

CREATE TABLE students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT CHECK (age > 0),
    email VARCHAR(100) UNIQUE
);
Explanation:

student_id INT PRIMARY KEY → Defines student_id as the primary key.
name VARCHAR(100) NOT NULL → Ensures name cannot be NULL.
age INT CHECK (age > 0) → Ensures age is greater than 0.
email VARCHAR(100) UNIQUE → Ensures unique email values.

3. Creating an Index
Indexes improve query performance.

CREATE INDEX idx_student_name ON students(name);
This creates an index on the name column to speed up searches.

4. Creating a View
A view is a virtual table based on a query.

CREATE VIEW student_view AS 
SELECT student_id, name FROM students;
This creates a view student_view that shows only student_id and name from the students table.

Key Points About CREATE Command
Defines the structure of database objects.
Once created, objects can be modified using the ALTER command.
Can be combined with constraints (NOT NULL, PRIMARY KEY, FOREIGN KEY, etc.).

3. What is the purpose of specifying data types and constraints during table creation? 
Ans.
Purpose of Specifying Data Types and Constraints During Table Creation
When creating a table in SQL, specifying data types and constraints is essential to ensure data integrity, 
accuracy, and efficiency in database operations.

1. Purpose of Data Types
A data type defines the kind of values a column can store. This helps in:

1. Data Integrity – Prevents invalid data entry (e.g., storing text in a numeric column).
2. Optimized Storage – Saves memory by using appropriate data types (e.g., INT vs. BIGINT).
3. Faster Processing – Enables efficient indexing and searching based on data types.

Example of Data Types:

INT - Integer ID
VARCHAR(100) - Text with max 100 characters
DECIMAL(10,2)- Numeric value with 2 decimal places
DATE - Date format (YYYY-MM-DD) 
and many more...

2. Purpose of Constraints
Constraints enforce rules on data to maintain accuracy, consistency, and reliability.

1. Prevents Duplicate Data – PRIMARY KEY, UNIQUE
2. Ensures Mandatory Values – NOT NULL
3. Maintains Data Relationships – FOREIGN KEY
3. Applies Business Rules – CHECK, DEFAULT

Example of Constraints:

CREATE TABLE students (
    student_id INT PRIMARY KEY,        -- Unique ID for each student
    name VARCHAR(100) NOT NULL,        -- Name cannot be NULL
    age INT CHECK (age > 0),           -- Age must be greater than 0
    email VARCHAR(100) UNIQUE,         -- No duplicate emails allowed
    class_id INT,                      
    FOREIGN KEY (class_id) REFERENCES classes(class_id)  -- Relationship with another table
);

LAB EXERCISES: 
 
 Lab 1: Create a table courses with columns: course_id, course_name, and 
course_credits. Set the course_id as the primary key. 
Ans:
mysql> use university_db;
Database changed

mysql> create table courses (course_id int primary key auto_increment, course_name varchar(50), course_credits decimal(10,2));
Query OK, 0 rows affected (0.36 sec)

mysql> describe courses;
+----------------+---------------+------+-----+---------+----------------+
| Field          | Type          | Null | Key | Default | Extra          |
+----------------+---------------+------+-----+---------+----------------+
| course_id      | int           | NO   | PRI | NULL    | auto_increment |
| course_name    | varchar(50)   | YES  |     | NULL    |                |
| course_credits | decimal(10,2) | YES  |     | NULL    |                |
+----------------+---------------+------+-----+---------+----------------+
3 rows in set (0.01 sec)

 Lab 2: Use the CREATE command to create a database university_db.
Ans:
create database university_db;
Query OK, 1 row affected (0.11 sec)

5. ALTER Command  
 
Theory Questions: 
 
1. What is the use of the ALTER command in SQL? 
Ans. ALTER Command in SQL
The ALTER command is a Data Definition Language (DDL) statement used to modify an existing database structure without deleting or recreating it. It allows you to add, modify, or remove columns, constraints, and indexes in a table.

Uses of the ALTER Command
The ALTER command is primarily used for:

* Adding new columns
* Modifying column data types
* Renaming columns or tables
* Adding or removing constraints
* Dropping columns

Operation	                            SQL Syntax
Add Column      -   ALTER TABLE table_name ADD COLUMN column_name datatype;
Modify Column   -   ALTER TABLE table_name MODIFY COLUMN column_name new_datatype;
Rename Column   -   ALTER TABLE table_name RENAME COLUMN old_name TO new_name;
Rename Table    -   ALTER TABLE old_table_name RENAME TO new_table_name;
Add Constraint  -   ALTER TABLE table_name ADD CONSTRAINT constraint_name CONSTRAINT_TYPE(column_name);
Drop Column     -   ALTER TABLE table_name DROP COLUMN column_name;
Drop Constraint -	ALTER TABLE table_name DROP CONSTRAINT constraint_name;

2. How can you add, modify, and drop columns from a table using ALTER? 
Ans.
Using ALTER TABLE to Modify Columns in SQL

Add a Column:
ALTER TABLE employees ADD COLUMN department VARCHAR(50);

Modify a Column:
ALTER TABLE employees MODIFY COLUMN department TEXT NOT NULL;  -- MySQL  
ALTER TABLE employees ALTER COLUMN department TYPE TEXT;  -- PostgreSQL, SQL Server

Drop a Column:
ALTER TABLE employees DROP COLUMN department;


ADD COLUMN → Adds a new column.
MODIFY COLUMN / ALTER COLUMN → Changes data type or constraints.
DROP COLUMN → Removes a column from the table.

LAB EXERCISES: 
 
 Lab 1: Modify the courses table by adding a column course_duration using the ALTER 
command. 
Ans.
mysql> alter table courses add column course_duration varchar(50);
Query OK, 0 rows affected (0.92 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> describe courses;
+-----------------+---------------+------+-----+---------+----------------+
| Field           | Type          | Null | Key | Default | Extra          |
+-----------------+---------------+------+-----+---------+----------------+
| course_id       | int           | NO   | PRI | NULL    | auto_increment |
| course_name     | varchar(50)   | YES  |     | NULL    |                |
| course_credits  | decimal(10,2) | YES  |     | NULL    |                |
| course_duration | varchar(50)   | YES  |     | NULL    |                |
+-----------------+---------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

 Lab 2: Drop the course_credits column from the courses table.
Ans.
mysql> alter table courses drop column course_credits;
Query OK, 0 rows affected (0.86 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> describe courses;
+-----------------+-------------+------+-----+---------+----------------+
| Field           | Type        | Null | Key | Default | Extra          |
+-----------------+-------------+------+-----+---------+----------------+
| course_id       | int         | NO   | PRI | NULL    | auto_increment |
| course_name     | varchar(50) | YES  |     | NULL    |                |
| course_duration | varchar(50) | YES  |     | NULL    |                |
+-----------------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

6. DROP Command  
 
Theory Questions: 
 
1. What is the function of the DROP command in SQL? 
Ans.
DROP Command in SQL 
The DROP command permanently deletes database objects like tables, databases, columns, and indexes. 


Drop a Table:

DROP TABLE students;

Drop a Database:
DROP DATABASE school;

Drop a Column:
ALTER TABLE students DROP COLUMN age;

Drop an Index:
DROP INDEX idx_student_name ON students;

2. What are the implications of dropping a table from a database? 
Ans.
Implications of Dropping a Table in SQL
1. Permanent Data Loss – All records in the table are permanently deleted.
2. Cannot Be Undone – The action cannot be rolled back unless a backup exists.
3. Removes Structure – The table schema (columns, constraints, indexes) is deleted.
4. Breaks Relationships – If the table has FOREIGN KEY references, they may cause errors.
5. Affects Queries & Applications – Any queries, views, or applications using the table will fail.
 
LAB EXERCISES: 
 
 Lab 1: Drop the teachers table from the school_db database. 
Ans.
mysql> use school_db;
Database changed
mysql> drop table teachers;
Query OK, 0 rows affected (0.22 sec)

 Lab 2: Drop the students table from the school_db database and verify that the table has 
been removed.
Ans.
mysql> drop table teachers;
Query OK, 0 rows affected (0.16 sec)

mysql> show tables;
Empty set (0.22 sec)

7. Data Manipulation Language (DML)  
 
Theory Questions: 
 
1. Define the INSERT, UPDATE, and DELETE commands in SQL.
Ans.
INSERT, UPDATE, and DELETE Commands in SQL
These three Data Manipulation Language (DML) commands are used to modify data in a database.

1.INSERT Command (Add New Data)
The INSERT command is used to add new records into a table.

Syntax:

INSERT INTO table_name (column1, column2, ...) 
VALUES (value1, value2, ...);
Example:

INSERT INTO students (student_id, name, age) 
VALUES (1, 'Alice', 20);
* Adds a new student to the students table.

2. UPDATE Command (Modify Existing Data)
The UPDATE command modifies existing records in a table.

Syntax:

UPDATE table_name 
SET column1 = value1, column2 = value2 
WHERE condition;

Example:

UPDATE students 
SET age = 21 
WHERE student_id = 1;
* Updates Alice’s age to 21.

3. DELETE Command (Remove Data)
The DELETE command removes records from a table.

Syntax:

DELETE FROM table_name WHERE condition;

Example:

DELETE FROM students WHERE student_id = 1;
* Deletes Alice’s record.

Without WHERE, all records will be deleted!

Key Differences

Command	        Purpose	              Affects	
INSERT	    Adds new data             New rows	
UPDATE	    Modifies existing data	  Specific rows	
DELETE	    Removes data	          Specific rows	


2. What is the importance of the WHERE clause in UPDATE and DELETE operations? 
Importance of the WHERE Clause in UPDATE and DELETE Operations
The WHERE clause is critical in UPDATE and DELETE commands because it specifies which records should be modified or removed. 
Without it, all rows in the table will be affected! 
Prevents modifying or deleting all records accidentally.
Targets specific rows instead of affecting the entire table.

Example (Safe UPDATE with WHERE)

UPDATE students SET age = 22 WHERE student_id = 1;
Without WHERE → Updates all students' ages!

Example (Safe DELETE with WHERE)

DELETE FROM students WHERE student_id = 1;
Without WHERE → Deletes all students!


LAB EXERCISES: 
 
 Lab 1: Insert three records into the courses table using the INSERT command. 
mysql> insert into courses (course_id,course_name,course_duration)Values
    -> (1001,"PHP","4 Months"),
    -> (1002,"Java","6 Months"),
    -> (1003,"Data Analyst","8 Months");
Query OK, 3 rows affected (0.12 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | Java         | 6 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 2: Update the course duration of a specific course using the UPDATE command. 
Ans.
mysql> update courses set course_duration = "7 Months" where course_name="java";
Query OK, 1 row affected (0.09 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | java         | 7 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 3: Delete a course with a specific course_id from the courses table using the DELETE 
command. 
Ans.
mysql> delete from courses where course_id=1003;
Query OK, 1 row affected (0.13 sec)

mysql> select * from courses;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1001 | PHP         | 4 Months        |
|      1002 | java        | 7 Months        |
+-----------+-------------+-----------------+
2 rows in set (0.00 sec)

8. Data Query Language (DQL)  
 
Theory Questions: 
 
1. What is the SELECT statement, and how is it used to query data? 
Ans.
SELECT Statement in SQL
The SELECT statement is used to retrieve data from one or more tables in a database. It allows filtering, 
sorting, and grouping of data based on specific conditions.

Basic Syntax:
SELECT column1, column2 FROM table_name;

Select All Columns:
SELECT * FROM courses;

Filter with WHERE:
SELECT * FROM courses WHERE course_duration = '6 Months';

Sort with ORDER BY:
SELECT * FROM courses ORDER BY course_name ASC;

Limit Results:
SELECT * FROM courses LIMIT 5;

2. Explain the use of the ORDER BY and WHERE clauses in SQL queries. 
Ans.
ORDER BY and WHERE Clauses in SQL
Both ORDER BY and WHERE are used to refine query results:

WHERE → Filters rows before retrieval.
ORDER BY → Sorts the final result set.

Example (WHERE + ORDER BY)
SELECT * FROM students WHERE age > 18 ORDER BY name ASC;
 
LAB EXERCISES: 
 
 Lab 1: Retrieve all courses from the courses table using the SELECT statement. 
Ans.
mysql> select * from courses;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1001 | PHP          | 4 Months        |
|      1002 | java         | 7 Months        |
|      1003 | Data Analyst | 8 Months        |
+-----------+--------------+-----------------+
3 rows in set (0.00 sec)

 Lab 2: Sort the courses based on course_duration in descending order using ORDER BY.
Ans.
mysql> select * from courses where course_duration order by course_duration desc;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1002 | java        | 7 Months        |
|      1001 | PHP         | 4 Months        |
+-----------+-------------+-----------------+
2 rows in set, 2 warnings (0.10 sec)

 Lab 3: Limit the results of the SELECT query to show only the top two courses using LIMIT.
Ans.
mysql> select * from courses order by course_id limit 2;
+-----------+-------------+-----------------+
| course_id | course_name | course_duration |
+-----------+-------------+-----------------+
|      1001 | PHP         | 4 Months        |
|      1002 | java        | 7 Months        |
+-----------+-------------+-----------------+
2 rows in set (0.00 sec)

9. Data Control Language (DCL)  
 
Theory Questions: 
 
1. What is the purpose of GRANT and REVOKE in SQL? 
Ans.
Data Controlling Language (DCL) helps users to retrieve and modify the data stored in the database with some specified queries. Grant 
and Revoke belong to these types of commands of the Data controlling Language. DCL is a component of SQL commands. 

1. Grant : 
SQL Grant command is specifically used to provide privileges to database objects for a user. 
This command also allows users to grant permissions to other users too. 

Syntax: 
grant privilege_name on object_name
to {user_name | public | role_name} 
Here privilege_name is which permission has to be granted, object_name is the name of the database object, 
user_name is the user to which access should be provided, the public is used to permit access to all the users. 

2. Revoke : 
Revoke command withdraw user privileges on database objects if any granted. It does operations opposite to the Grant command.
When a privilege is revoked from a particular user U, then the privileges granted to all other users by user U will be revoked. 

Syntax: 
revoke privilege_name on object_name
from {user_name | public | role_name}
Example:  

2. How do you manage privileges using these commands? 
Ans.
Managing user access and privileges is a crucial aspect of database administration in MySQL. 
After creating a user account with the CREATE USER statement, the next step is to define what that user can do within the database.

This is achieved through the GRANT statement, which allows administrators to assign specific privileges to users 
and ensure they can perform only the actions necessary for their roles.
Also, if a user’s access needs to be restricted, the REVOKE statement can remove previously granted privileges. 

LAB EXERCISES: 
 
 Lab 1: Create two new users user1 and user2 and grant user1 permission to SELECT 
from the courses table. 
 CREATE USER 'user1'@'localhost' IDENTIFIED BY 'password1';
Query OK, 0 rows affected (0.47 sec)

mysql> CREATE USER 'user2'@'localhost' IDENTIFIED BY 'password2';
Query OK, 0 rows affected (0.17 sec)

GRANT SELECT ON university_db.courses TO 'user1'@'localhost';
Query OK, 0 rows affected (0.10 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.08 sec)

 SHOW GRANTS FOR 'user1'@'localhost';
+------------------------------------------------------------------+
| Grants for user1@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user1`@`localhost`                        |
| GRANT SELECT ON `university_db`.`courses` TO `user1`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.06 sec)

 Lab 2: Revoke the INSERT permission from user1 and give it to user2.
Ans.
REVOKE INSERT ON university_db.courses FROM 'user1'@'localhost';
Query OK, 0 rows affected (0.11 sec)

mysql> GRANT INSERT ON university_db.courses TO 'user2'@'localhost';
Query OK, 0 rows affected (0.10 sec)

mysql> SHOW GRANTS FOR 'user1'@'localhost';
+------------------------------------------------------------------+
| Grants for user1@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user1`@`localhost`                        |
| GRANT SELECT ON `university_db`.`courses` TO `user1`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.00 sec)

mysql> SHOW GRANTS FOR 'user2'@'localhost';
+------------------------------------------------------------------+
| Grants for user2@localhost                                       |
+------------------------------------------------------------------+
| GRANT USAGE ON *.* TO `user2`@`localhost`                        |
| GRANT INSERT ON `university_db`.`courses` TO `user2`@`localhost` |
+------------------------------------------------------------------+
2 rows in set (0.00 sec)

10. Transaction Control Language (TCL)  
 
Theory Questions: 
 
1. What is the purpose of the COMMIT and ROLLBACK commands in SQL?
Ans.n SQL, transaction control is essential for managing changes in a database effectively. 
COMMIT and ROLLBACK are two crucial Transaction Control Language (TCL) commands that help maintain data integrity and consistency. 
While COMMIT ensures that all changes in a transaction are permanently saved, ROLLBACK provides a mechanism to undo changes when something goes wrong.

Understanding the differences between these commands is critical for database administrators, 
developers, and anyone working with transactional data to ensure reliable and error-free database operations. 
Proper usage of these commands ensures reliable and error-free database operations while maintaining data stability.

COMMIT
1. Function - Permanently saves changes made by the current transaction.
2. Undo Capability - Cannot undo changes after execution.
3. When Applied - Used when the transaction is successfully completed.
4. Data Integrity - Ensures that changes are saved permanently.
5. Syntax - COMMIT;
6. Error Handling - No changes are rolled back even if errors occur after the COMMIT statement.

ROLLBACK
1. Function - Undoes changes made by the current transaction.
2. Undo Capability - Reverts the database to its previous state before the transaction.
3. When Applied - Used when the transaction fails, is incorrect, or aborted.
4. Data Integrity - Ensures that errors do not affect the database by undoing partial changes.
5. Syntax - ROLLBACK;
6. Error Handling - Automatically undoes uncommitted changes in case of errors or failures.


2. Explain how transactions are managed in SQL databases. 
Managing Transactions in SQL Databases
A transaction in SQL is a group of one or more SQL statements executed as a single unit of work. Transactions ensure data integrity and consistency, especially in scenarios involving multiple changes to the database.
Transaction Lifecycle
Transactions follow a lifecycle with four main stages:
BEGIN (Start Transaction) – The transaction starts.
DML Operations – Perform database changes (INSERT, UPDATE, DELETE).
COMMIT or ROLLBACK
COMMIT: Saves all changes permanently.
ROLLBACK: Undoes all changes made during the transaction.
END – The transaction is complete.

A transaction in SQL is a sequence of one or more SQL statements executed as a single unit of work. 
These statements could be performing operations like INSERT, UPDATE, or DELETE. The main idea behind a transaction is that all changes made within it should either be completely successful or fully undone in case of failure. In the case of an error, a rollback ensures that no partial changes are saved.

The SQL transaction must adhere to four key properties known as ACID:

Atomicity: The outcome of a transaction can either be completely successful or completely unsuccessful. 
The whole transaction must be rolled back if one part of it fails.
Consistency: Transactions maintain integrity restrictions by moving the database from one valid state to another.
Isolation: Concurrent transactions are isolated from one another, assuring the accuracy of the data.
Durability: Once a transaction is committed, its modifications remain in effect even in the event of a system failure.
 
LAB EXERCISES: 
 
 Lab 1: Insert a few rows into the courses table and use COMMIT to save the changes. 
Ans.
 start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1006,'Paython','5 Months'),(1007,'Artificial Intelligence','8 Months');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> commit;
Query OK, 0 rows affected (0.10 sec)

mysql> SELECT * FROM courses;
+-----------+-------------------------+-----------------+
| course_id | course_name             | course_duration |
+-----------+-------------------------+-----------------+
|      1001 | PHP                     | 4 Months        |
|      1002 | java                    | 7 Months        |
|      1003 | Data Analyst            | 8 Months        |
|      1004 | Full Stack              | 12 Months       |
|      1005 | Javascript              | 3 Months        |
|      1006 | Paython                 | 5 Months        |
|      1007 | Artificial Intelligence | 8 Months        |
+-----------+-------------------------+-----------------+
7 rows in set (0.00 sec)

 Lab 2: Insert additional rows, then use ROLLBACK to undo the last insert operation. 
Ans.
 start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1008,'Data Science','3 Months');
Query OK, 1 row affected (0.00 sec)

mysql> rollback;
Query OK, 0 rows affected (0.04 sec)

mysql> SELECT * FROM courses;
+-----------+-------------------------+-----------------+
| course_id | course_name             | course_duration |
+-----------+-------------------------+-----------------+
|      1001 | PHP                     | 4 Months        |
|      1002 | java                    | 7 Months        |
|      1003 | Data Analyst            | 8 Months        |
|      1004 | Full Stack              | 12 Months       |
|      1005 | Javascript              | 3 Months        |
|      1006 | Paython                 | 5 Months        |
|      1007 | Artificial Intelligence | 8 Months        |
+-----------+-------------------------+-----------------+
7 rows in set (0.00 sec)

 Lab 3: Create a SAVEPOINT before updating the courses table, and use it to roll back 
specific changes.
Ans.
mysql> start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql> insert into courses(course_id,course_name,course_duration) values(1008,'Data Science','3 Months');
Query OK, 1 row affected (0.00 sec)

mysql> savepoint before_update;
Query OK, 0 rows affected (0.00 sec)

mysql> update courses set course_duration ='6 Months' where course_id=1008;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> ROLLBACK TO before_update;
Query OK, 0 rows affected (0.05 sec)

mysql> commit;
Query OK, 0 rows affected (0.07 sec)

mysql> SELECT * FROM courses WHERE course_id = 1008;
+-----------+--------------+-----------------+
| course_id | course_name  | course_duration |
+-----------+--------------+-----------------+
|      1008 | Data Science | 3 Months        |
+-----------+--------------+-----------------+
1 row in set (0.00 sec)