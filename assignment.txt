Module 4 - Introduction to DBMS

Theory Question:

1. What is SQL, and why is it essential in database management?
Ans. SQL stand for Structured Query Language is a programming language for storing and processing information in a relational database.
 A relational database stores information in tabular form, with rows and columns representing different data attributes and the various 
 relationships between the data values.

* Data Retrieval & Manipulation – SQL enables querying databases to retrieve specific data using commands 
  like SELECT, INSERT, UPDATE, and DELETE.
* Database Structure Management – It allows users to define and modify database structures with CREATE, ALTER, and DROP statements.
* Data Integrity & Security – SQL supports constraints (e.g., PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK) to 
  maintain data accuracy and provides user permissions via GRANT and REVOKE.
* Scalability & Performance – It helps in optimizing query performance through indexing and efficient data structuring.
* Widely Used & Standardized – SQL is supported by most database management systems (DBMS) like MySQL, PostgreSQL, SQL Server, and Oracle.

2.  Explain the difference between DBMS and RDBMS. 
Ans. DBMS: 
     1. DBMS stand for Database Management System.
     2. DBMS store data as a files.
     3. Data elements need to access individually.
     4. No relationship between data.
     5. May not support normalization, leading to redundancy.
     6. Limited constraints for ensuring data accuracy.
     7. Basic security features.
     8. Example, File systems, XML databases, NoSQL databases.

     RDMS:
     1. RDMS stand for Relational Database Management System.
     2. RDBMS stores data in tabular form.
     3. Multiple data elements can be accessed at the same time.
     4. Data is stored in the form of tables which are related to each other.
     5. Follows normalization rules to reduce redundancy.
     6. Enforces constraints like PRIMARY KEY, FOREIGN KEY, etc.
     7. Advanced security, including user roles and access control.
     8. Example, MySQL, PostgreSQL, SQL Server, Oracle.

3. Describe the role of SQL in managing relational databases.
Ans. SQL (Structured Query Language) is the core tool for interacting with Relational Database Management Systems (RDBMS).
 It helps in organizing, managing, and retrieving structured data efficiently. Here’s how SQL plays a crucial role in RDBMS:

1. Data Definition (DDL - Data Definition Language)
SQL helps in defining and managing database structures.
CREATE TABLE – Defines a new table.
ALTER TABLE – Modifies an existing table.
DROP TABLE – Deletes a table.

2. Data Manipulation (DML - Data Manipulation Language)
SQL allows users to insert, update, delete, and retrieve data.
INSERT INTO – Adds new records.
UPDATE – Modifies existing records.
DELETE – Removes records.
SELECT – Retrieves data.

3. Data Retrieval & Querying (DQL - Data Query Language)
SQL enables complex data retrieval using SELECT, including filtering, sorting, and aggregating data.
WHERE – Filters records.
ORDER BY – Sorts results.
GROUP BY – Groups records.
JOIN – Combines data from multiple tables.

4. Transaction Management (TCL - Transaction Control Language)
SQL ensures data consistency and reliability through transactions.
COMMIT – Saves changes permanently.
ROLLBACK – Reverts changes in case of failure.
SAVEPOINT – Sets checkpoints within a transaction.

5. User Access Control & Security (DCL - Data Control Language)
SQL provides security features for managing user permissions.
GRANT – Provides access to users.
REVOKE – Removes access from users.

6. Data Integrity & Constraints
SQL ensures data consistency and accuracy by enforcing constraints like:
PRIMARY KEY – Ensures unique records.
FOREIGN KEY – Maintains relationships between tables.
UNIQUE – Prevents duplicate values.
CHECK – Defines conditions for valid data.

4. What are the key features of SQL? 
SQL is like the brain behind relational databases, helping you store, retrieve, and manage data efficiently. 
key features of SQL:

1. Data Definition Language (DDL): SQL provides a set of commands to define and modify the structure of a database, 
   including creating tables, modifying table structure, and dropping tables.

2. Data Manipulation Language (DML): SQL provides a set of commands to manipulate data within a database, 
   including adding, modifying, and deleting data.

3. Data Query Language(DQL): SQL provides a rich set of commands for querying a database to retrieve data,
   including the ability to filter, sort, group, and join data from multiple tables.

4. Transaction Control Language(TCL): SQL supports transaction processing, which allows users to group a set of 
   database operations into a single transaction that can be rolled back in case of failure.

5. User Access Control (DCL Data Control Language): SQL provides mechanisms to control user access to a database, 
   including the ability to grant and revoke privileges to perform certain operations on the database.

6. Data Integrity: SQL includes features to enforce data integrity, such as the ability to specify constraints on 
   the values that can be inserted or updated in a table, and to enforce referential integrity between tables.

7. Portability: SQL is a standardized language, meaning that SQL code written for one database management 
   system can be used on another system with minimal modification.

 
LAB EXERCISES: 
 
 Lab 1: Create a new database named school_db and a table called students with the 
following columns: student_id, student_name, age, class, and address. 

mysql> create database school_db;
Query OK, 1 row affected (0.36 sec)

mysql> use school_db;
Database changed
mysql> create table students (student_id int primary key auto_increment, student_name varchar(50), age int, class varchar(50), address varchar(50));
Query OK, 0 rows affected (0.53 sec)

mysql> describe students;
+--------------+-------------+------+-----+---------+----------------+
| Field        | Type        | Null | Key | Default | Extra          |
+--------------+-------------+------+-----+---------+----------------+
| student_id   | int         | NO   | PRI | NULL    | auto_increment |
| student_name | varchar(50) | YES  |     | NULL    |                |
| age          | int         | YES  |     | NULL    |                |
| class        | varchar(50) | YES  |     | NULL    |                |
| address      | varchar(50) | YES  |     | NULL    |                |
+--------------+-------------+------+-----+---------+----------------+
5 rows in set (0.29 sec)

 Lab 2: Insert five records into the students table and retrieve all records using the SELECT 
statement.
mysql> insert into students(student_id, student_name, age, class, address) values (101,"Aynash",6,"Grade 1","Manjalpur"),(102,"Naitika",10,"Grade 5","Mandvi"),
    -> (103, "Rudra",13,"Grade 8","Alkapuri"),(104, "Kavya",11,"Grade 6", "Wadi"),(105,"Payal",15,"Grade 10","Vasna");
Query OK, 5 rows affected (0.10 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from students;
+------------+--------------+------+----------+-----------+
| student_id | student_name | age  | class    | address   |
+------------+--------------+------+----------+-----------+
|        101 | Aynash       |    6 | Grade 1  | Manjalpur |
|        102 | Naitika      |   10 | Grade 5  | Mandvi    |
|        103 | Rudra        |   13 | Grade 8  | Alkapuri  |
|        104 | Kavya        |   11 | Grade 6  | Wadi      |
|        105 | Payal        |   15 | Grade 10 | Vasna     |
+------------+--------------+------+----------+-----------+
5 rows in set (0.06 sec)


2. SQL Syntax  
Theory Questions: 
 
1. What are the basic components of SQL syntax?
Ans. SQL (Structured Query Language) syntax consists of several key components that form the foundation of database operations. Here are the basic components:

1. Statements
SQL statements perform tasks such as retrieving, inserting, updating, or deleting data. Common statements include:
SELECT – Retrieves data from a database.
INSERT – Adds new data to a table.
UPDATE – Modifies existing data.
DELETE – Removes data from a table.
CREATE – Creates a database object (e.g., table, view, index).
DROP – Deletes a database object.
ALTER – Modifies an existing database object.

2. Clauses
Clauses are components of SQL statements that specify conditions or modify query behavior:
WHERE – Filters records based on a condition.
ORDER BY – Sorts query results.
GROUP BY – Groups records with aggregate functions.
HAVING – Filters grouped records.

3. Expressions
Expressions compute values and can include:
Arithmetic expressions (5 + 3, price * quantity).
String expressions (CONCAT(first_name, ' ', last_name)).
Boolean expressions (salary > 50000).

4. Functions
SQL provides built-in functions for data processing, including:
Aggregate functions (SUM(), AVG(), COUNT()).
String functions (UPPER(), LOWER(), LENGTH()).
Date functions (NOW(), DATEADD(), DATEDIFF()).

5. Joins
Joins combine data from multiple tables:
INNER JOIN – Returns matching records from both tables.
LEFT JOIN – Returns all records from the left table and matching ones from the right.
RIGHT JOIN – Returns all records from the right table and matching ones from the left.
FULL JOIN – Returns all records when there is a match in either table.

6. Operators
SQL supports various operators for filtering and comparing values:
Comparison operators (=, >, <, >=, <=, <>).
Logical operators (AND, OR, NOT).
Like and pattern matching (LIKE, IN, BETWEEN).
Set operators (UNION, INTERSECT, EXCEPT).

7. Keywords
Reserved words that define SQL operations:
DISTINCT – Removes duplicate results.
AS – Renames columns or tables.
LIMIT / TOP – Limits the number of results.

2. Write the general structure of an SQL SELECT statement.
Ans.The general structure of an SQL SELECT statement is:

SQL SELECT Statement:

SELECT column1, column2, ...
FROM table_name
WHERE condition
GROUP BY column
HAVING condition
ORDER BY column ASC|DESC
LIMIT number;

SELECT – Specifies the columns to retrieve.
FROM – Specifies the table from which to retrieve the data.
WHERE (Optional) – Filters records based on a condition.
GROUP BY (Optional) – Groups rows sharing a property (used with aggregate functions).
HAVING (Optional) – Filters groups (works like WHERE but on grouped data).
ORDER BY (Optional) – Sorts the results in ascending (ASC) or descending (DESC) order.
LIMIT (Optional) – Restricts the number of rows returned.

3. Explain the role of clauses in SQL statements. 
Ans.Role of Clauses in SQL Statements
Clauses in SQL are used to define specific conditions, modify query behavior, and control how data is retrieved or manipulated.
They help refine SQL statements by filtering, grouping, sorting, or limiting results.

Here are the key SQL clauses and their roles:

1. WHERE Clause
Filters records based on a specified condition.
Used in SELECT, UPDATE, and DELETE statements.

2. ORDER BY Clause
Sorts query results in ascending (ASC) or descending (DESC) order.
Default order is ASC (ascending).

3. GROUP BY Clause
Groups rows that have the same values in specified columns.
Often used with aggregate functions (COUNT(), SUM(), AVG(), etc.).

4. HAVING Clause
Filters grouped records (like WHERE, but for aggregated data).

5. JOIN Clause
Combines records from multiple tables based on related columns.

6. LIMIT Clause (or TOP in some databases)
Restricts the number of rows returned in the result.

7. DISTINCT Clause
Removes duplicate values from the result set.

8. UNION Clause
Combines results from multiple SELECT statements, removing duplicates.

 
LAB EXERCISES: 
 
 Lab 1: Write SQL queries to retrieve specific columns (student_name and age) from the 
students table. 
Ans.
mysql> select student_name,age from students;
+--------------+------+
| student_name | age  |
+--------------+------+
| Aynash       |    6 |
| Naitika      |   10 |
| Rudra        |   13 |
| Kavya        |   11 |
| Payal        |   15 |
+--------------+------+
5 rows in set (0.00 sec)

 Lab 2: Write SQL queries to retrieve all students whose age is greater than 10.
Ans.
mysql> select * from students where age > 10;
+------------+--------------+------+----------+----------+
| student_id | student_name | age  | class    | address  |
+------------+--------------+------+----------+----------+
|        103 | Rudra        |   13 | Grade 8  | Alkapuri |
|        104 | Kavya        |   11 | Grade 6  | Wadi     |
|        105 | Payal        |   15 | Grade 10 | Vasna    |
+------------+--------------+------+----------+----------+
3 rows in set (0.05 sec)

mysql>

create database university_db;
Query OK, 1 row affected (0.11 sec)

mysql> use university_db;
Database changed

mysql> create table courses (course_id int primary key auto_increment, course_name varchar(50), course_credits decimal(10,2));
Query OK, 0 rows affected (0.36 sec)

mysql> desc courses;
+----------------+---------------+------+-----+---------+----------------+
| Field          | Type          | Null | Key | Default | Extra          |
+----------------+---------------+------+-----+---------+----------------+
| course_id      | int           | NO   | PRI | NULL    | auto_increment |
| course_name    | varchar(50)   | YES  |     | NULL    |                |
| course_credits | decimal(10,2) | YES  |     | NULL    |                |
+----------------+---------------+------+-----+---------+----------------+
3 rows in set (0.01 sec)